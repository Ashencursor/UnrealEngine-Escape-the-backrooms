#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Roaming_Smiler

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Roaming_Smiler.BP_Roaming_Smiler_C
// 0x0080 (0x0540 - 0x04C0)
class ABP_Roaming_Smiler_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       KillPlayer;                                        // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EyeSight;                                          // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Fade_Opacity_ADBC832D4681FEF92D7330A684596D62;     // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Fade__Direction_ADBC832D4681FEF92D7330A684596D62;  // 0x04DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Fade;                                              // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_Speed_3CBDCD1D4510EF422C9CAF8E372DFAA5; // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_3CBDCD1D4510EF422C9CAF8E372DFAA5; // 0x04EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4ED[0x3];                                      // 0x04ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANoClipVolume*                          NoClipVolume;                                      // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartingLocation;                                  // 0x0500(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAttack;                                         // 0x050C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldMove;                                        // 0x050D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_50E[0x2];                                      // 0x050E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehaviorTree*                          Behavior_Tree;                                     // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkSpeed;                                         // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintingSpeed;                                    // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMat;                                        // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle;                                       // 0x0528(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVisible;                                         // 0x0530(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsAttacking;                                       // 0x0531(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Roaming_Smiler(int32 EntryPoint);
	void FadeIn();
	void FadeOut();
	void BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void FindTeleportLocation();
	void OnQueryFinished(class UEnvQueryInstanceBlueprintWrapper* QueryInstance, EEnvQueryStatus QueryStatus);
	void ResetSpotted();
	void OnSpotted();
	void ToggleSprint(bool IsSprinting);
	void MC_Jumpscare();
	void AttackPlayer(class ABPCharacter_Demo_C* Player);
	void ReceiveBeginPlay();
	void Fade__UpdateFunc();
	void Fade__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void LookAt(class ABPCharacter_Demo_C* Target);
	void StopMovement();
	void LookAtPlayer(class ABPCharacter_Demo_C* Target);
	void CanSeePlayer(class ABPCharacter_Demo_C* Target, bool* CanSee);
	void CheckPlayersTimer();
	void OnRep_IsVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Roaming_Smiler_C">();
	}
	static class ABP_Roaming_Smiler_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Roaming_Smiler_C>();
	}
};
static_assert(alignof(ABP_Roaming_Smiler_C) == 0x000010, "Wrong alignment on ABP_Roaming_Smiler_C");
static_assert(sizeof(ABP_Roaming_Smiler_C) == 0x000540, "Wrong size on ABP_Roaming_Smiler_C");
static_assert(offsetof(ABP_Roaming_Smiler_C, UberGraphFrame) == 0x0004C0, "Member 'ABP_Roaming_Smiler_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, KillPlayer) == 0x0004C8, "Member 'ABP_Roaming_Smiler_C::KillPlayer' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, EyeSight) == 0x0004D0, "Member 'ABP_Roaming_Smiler_C::EyeSight' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, Fade_Opacity_ADBC832D4681FEF92D7330A684596D62) == 0x0004D8, "Member 'ABP_Roaming_Smiler_C::Fade_Opacity_ADBC832D4681FEF92D7330A684596D62' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, Fade__Direction_ADBC832D4681FEF92D7330A684596D62) == 0x0004DC, "Member 'ABP_Roaming_Smiler_C::Fade__Direction_ADBC832D4681FEF92D7330A684596D62' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, Fade) == 0x0004E0, "Member 'ABP_Roaming_Smiler_C::Fade' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, Timeline_1_Speed_3CBDCD1D4510EF422C9CAF8E372DFAA5) == 0x0004E8, "Member 'ABP_Roaming_Smiler_C::Timeline_1_Speed_3CBDCD1D4510EF422C9CAF8E372DFAA5' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, Timeline_1__Direction_3CBDCD1D4510EF422C9CAF8E372DFAA5) == 0x0004EC, "Member 'ABP_Roaming_Smiler_C::Timeline_1__Direction_3CBDCD1D4510EF422C9CAF8E372DFAA5' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, Timeline_1) == 0x0004F0, "Member 'ABP_Roaming_Smiler_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, NoClipVolume) == 0x0004F8, "Member 'ABP_Roaming_Smiler_C::NoClipVolume' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, StartingLocation) == 0x000500, "Member 'ABP_Roaming_Smiler_C::StartingLocation' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, CanAttack) == 0x00050C, "Member 'ABP_Roaming_Smiler_C::CanAttack' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, ShouldMove) == 0x00050D, "Member 'ABP_Roaming_Smiler_C::ShouldMove' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, Behavior_Tree) == 0x000510, "Member 'ABP_Roaming_Smiler_C::Behavior_Tree' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, WalkSpeed) == 0x000518, "Member 'ABP_Roaming_Smiler_C::WalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, SprintingSpeed) == 0x00051C, "Member 'ABP_Roaming_Smiler_C::SprintingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, DynamicMat) == 0x000520, "Member 'ABP_Roaming_Smiler_C::DynamicMat' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, TimerHandle) == 0x000528, "Member 'ABP_Roaming_Smiler_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, IsVisible) == 0x000530, "Member 'ABP_Roaming_Smiler_C::IsVisible' has a wrong offset!");
static_assert(offsetof(ABP_Roaming_Smiler_C, IsAttacking) == 0x000531, "Member 'ABP_Roaming_Smiler_C::IsAttacking' has a wrong offset!");

}

