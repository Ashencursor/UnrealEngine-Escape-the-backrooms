#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MP_GameMode

#include "Basic.hpp"

#include "MP_GameMode_classes.hpp"
#include "MP_GameMode_parameters.hpp"


namespace SDK
{

// Function MP_GameMode.MP_GameMode_C.ExecuteUbergraph_MP_GameMode
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameMode_C::ExecuteUbergraph_MP_GameMode(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "ExecuteUbergraph_MP_GameMode");

	Params::MP_GameMode_C_ExecuteUbergraph_MP_GameMode Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.CheckMissionComplete
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Map                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsExit_0                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_GameMode_C::CheckMissionComplete(class FName Map, const bool IsExit_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "CheckMissionComplete");

	Params::MP_GameMode_C_CheckMissionComplete Parms{};

	Parms.Map = Map;
	Parms.IsExit_0 = IsExit_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.UpdateCanJoin
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanJoin                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_GameMode_C::UpdateCanJoin(bool CanJoin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "UpdateCanJoin");

	Params::MP_GameMode_C_UpdateCanJoin Parms{};

	Parms.CanJoin = CanJoin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.OnDecreaseSanity
// (Event, Protected, BlueprintEvent)

void AMP_GameMode_C::OnDecreaseSanity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "OnDecreaseSanity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameMode.MP_GameMode_C.K2_PostLogin
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameMode_C::K2_PostLogin(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "K2_PostLogin");

	Params::MP_GameMode_C_K2_PostLogin Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.EndGame
// (BlueprintCallable, BlueprintEvent)

void AMP_GameMode_C::EndGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "EndGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameMode.MP_GameMode_C.K2_OnLogout
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      ExitingController                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameMode_C::K2_OnLogout(class AController* ExitingController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "K2_OnLogout");

	Params::MP_GameMode_C_K2_OnLogout Parms{};

	Parms.ExitingController = ExitingController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.HandleStartingNewPlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameMode_C::HandleStartingNewPlayer(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "HandleStartingNewPlayer");

	Params::MP_GameMode_C_HandleStartingNewPlayer Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.K2_OnRestartPlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameMode_C::K2_OnRestartPlayer(class AController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "K2_OnRestartPlayer");

	Params::MP_GameMode_C_K2_OnRestartPlayer Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.OnPlayerSpawn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCharacter_Demo_C*              Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameMode_C::OnPlayerSpawn(class ABPCharacter_Demo_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "OnPlayerSpawn");

	Params::MP_GameMode_C_OnPlayerSpawn Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.OnPlayerKilled
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCharacter_Demo_C*              Killed                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameMode_C::OnPlayerKilled(class ABPCharacter_Demo_C* Killed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "OnPlayerKilled");

	Params::MP_GameMode_C_OnPlayerKilled Parms{};

	Parms.Killed = Killed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.LoadLevel
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Map                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFromHub                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsExit_0                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_GameMode_C::LoadLevel(class FName Map, bool IsFromHub, const bool IsExit_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "LoadLevel");

	Params::MP_GameMode_C_LoadLevel Parms{};

	Parms.Map = Map;
	Parms.IsFromHub = IsFromHub;
	Parms.IsExit_0 = IsExit_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.UpdateAllScoreboards
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameMode_C::UpdateAllScoreboards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "UpdateAllScoreboards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameMode.MP_GameMode_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AMP_GameMode_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameMode.MP_GameMode_C.OnSuccess_17C4EA7D4066C891CBFD7585716BD16C
// (BlueprintCallable, BlueprintEvent)

void AMP_GameMode_C::OnSuccess_17C4EA7D4066C891CBFD7585716BD16C()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "OnSuccess_17C4EA7D4066C891CBFD7585716BD16C");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameMode.MP_GameMode_C.OnFailure_17C4EA7D4066C891CBFD7585716BD16C
// (BlueprintCallable, BlueprintEvent)

void AMP_GameMode_C::OnFailure_17C4EA7D4066C891CBFD7585716BD16C()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "OnFailure_17C4EA7D4066C891CBFD7585716BD16C");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameMode.MP_GameMode_C.AddToZone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFromHub                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsAnExit                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    DidFinish                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_GameMode_C::AddToZone(class FName Level, bool IsFromHub, bool IsAnExit, bool* DidFinish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "AddToZone");

	Params::MP_GameMode_C_AddToZone Parms{};

	Parms.Level = Level;
	Parms.IsFromHub = IsFromHub;
	Parms.IsAnExit = IsAnExit;

	UObject::ProcessEvent(Func, &Parms);

	if (DidFinish != nullptr)
		*DidFinish = Parms.DidFinish;
}


// Function MP_GameMode.MP_GameMode_C.RemoveFromZone
// (Public, BlueprintCallable, BlueprintEvent)

void AMP_GameMode_C::RemoveFromZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "RemoveFromZone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameMode.MP_GameMode_C.IsSingleplayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Singleplayer                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_GameMode_C::IsSingleplayer(bool* Singleplayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "IsSingleplayer");

	Params::MP_GameMode_C_IsSingleplayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Singleplayer != nullptr)
		*Singleplayer = Parms.Singleplayer;
}


// Function MP_GameMode.MP_GameMode_C.KickPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameMode_C::KickPlayer(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "KickPlayer");

	Params::MP_GameMode_C_KickPlayer Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.CheckAchievements
// (Public, BlueprintCallable, BlueprintEvent)

void AMP_GameMode_C::CheckAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "CheckAchievements");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameMode.MP_GameMode_C.FinishGameAchievement
// (Public, BlueprintCallable, BlueprintEvent)

void AMP_GameMode_C::FinishGameAchievement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "FinishGameAchievement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameMode.MP_GameMode_C.ChoosePlayerStart
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* AMP_GameMode_C::ChoosePlayerStart(class AController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "ChoosePlayerStart");

	Params::MP_GameMode_C_ChoosePlayerStart Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MP_GameMode.MP_GameMode_C.GetAdjustedTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   AdjustedTime                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameMode_C::GetAdjustedTime(float* AdjustedTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "GetAdjustedTime");

	Params::MP_GameMode_C_GetAdjustedTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AdjustedTime != nullptr)
		*AdjustedTime = Parms.AdjustedTime;
}


// Function MP_GameMode.MP_GameMode_C.SetPlayerColor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCharacter_Demo_C*              PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameMode_C::SetPlayerColor(class ABPCharacter_Demo_C* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "SetPlayerColor");

	Params::MP_GameMode_C_SetPlayerColor Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameMode.MP_GameMode_C.GetPlayerStarts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMP_GameMode_C::GetPlayerStarts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "GetPlayerStarts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameMode.MP_GameMode_C.SaveAll
// (Public, BlueprintCallable, BlueprintEvent)

void AMP_GameMode_C::SaveAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "SaveAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameMode.MP_GameMode_C.GetDefaultPawnClassForController
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      InController                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* AMP_GameMode_C::GetDefaultPawnClassForController(class AController* InController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameMode_C", "GetDefaultPawnClassForController");

	Params::MP_GameMode_C_GetDefaultPawnClassForController Parms{};

	Parms.InController = InController;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

