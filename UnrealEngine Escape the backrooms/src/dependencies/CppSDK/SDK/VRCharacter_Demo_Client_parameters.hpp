#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VRCharacter_Demo_Client

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FootstepActionsEnum_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "HE_Subtitle_structs.hpp"
#include "HE_Fear_structs.hpp"
#include "HE_SubtitleSeq_structs.hpp"


namespace SDK::Params
{

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ExecuteUbergraph_VRCharacter_Demo_Client
// 0x0BD0 (0x0BD0 - 0x0000)
struct VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0008(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0020(0x0018)(HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHE_Subtitle                           K2Node_MakeStruct_HE_Subtitle;                     // 0x0060(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHE_Subtitle>                   K2Node_MakeArray_Array;                            // 0x00B8(0x0010)(ReferenceParm)
	struct FHE_SubtitleSeq                        K2Node_MakeStruct_HE_SubtitleSeq;                  // 0x00C8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_6;                     // 0x00E0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x00F8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_7;                     // 0x0110(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_CanAction_Variable;                       // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanAction_Variable_1;                     // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12B[0x5];                                      // 0x012B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0130(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_143[0x5];                                      // 0x0143(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x0148(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_AddRelativeLocation_SweepHitResult;    // 0x0164(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_AddRelativeLocation_SweepHitResult_1;  // 0x01EC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_GetOrientationAndPosition_DeviceRotation; // 0x0274(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetOrientationAndPosition_DevicePosition; // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_1;                            // 0x0298(0x0018)(HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x02B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FKey                                   K2Node_InputActionEvent_Key_8;                     // 0x02E0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_9;                     // 0x02F8(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_6;                 // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_InputAxisEvent_AxisValue_5;                 // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Enable;                         // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0328(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_left_hand___1;                  // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_value_1;                        // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_left_hand__;                    // 0x0342(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_value;                          // 0x0343(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_InputAxisEvent_AxisValue_4;                 // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_3;                 // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_2;                 // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVRArms_AnimBP_C*                       K2Node_DynamicCast_AsVRArms_Anim_BP;               // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_Inventory_C*                        CallFunc_Create_ReturnValue;                       // 0x0370(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0378(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0384(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHeadMountedDisplayEnabled_ReturnValue;  // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_SettingsPanel_Theme2_C*             CallFunc_Create_ReturnValue_1;                     // 0x0398(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_2;                            // 0x03A0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsRightHand;                    // 0x03B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA[0x2];                                      // 0x03BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_Gesture;                        // 0x03BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x03D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x03E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x03F8(0x0018)(HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVRPlayer_AnimBP_C*                     K2Node_DynamicCast_AsVRPlayer_Anim_BP;             // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsVisible;                            // 0x0421(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_422[0x6];                                      // 0x0422(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Text;                                 // 0x0428(0x0018)(ConstParm)
	bool                                          K2Node_Event_Direction;                            // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_First;                                // 0x0441(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Hide_1;                               // 0x0442(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Hide;                                 // 0x0443(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Event_ItemClass;                            // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ClassClass_ReturnValue;          // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Item_C*                             CallFunc_FinishSpawningActor_ReturnValue;          // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHE_Fear                               K2Node_Event_Fear;                                 // 0x0468(0x0018)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0484(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x050C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0518(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x05A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x05A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A3[0x1];                                      // 0x05A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x05A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x05A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x05AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x05B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x05C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x05D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x05E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x05E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x05F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0604(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x060C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0618(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_HalfHeightAdjust_1;                   // 0x0624(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ScaledHalfHeightAdjust_1;             // 0x0628(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_HalfHeightAdjust;                     // 0x062C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ScaledHalfHeightAdjust;               // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x0638(0x0018)(HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0654(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_2;        // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_3;        // 0x0659(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x065A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65B[0x5];                                      // 0x065B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_5;                     // 0x0660(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_3;                            // 0x0678(0x0018)(HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x0690(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_2;  // 0x0718(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakVector_X;                            // 0x07A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x07A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x07AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x07B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_3;  // 0x07C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_EnableHMD_ReturnValue;                    // 0x0848(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_849[0x3];                                      // 0x0849(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult;    // 0x084C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult_1;  // 0x08D4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x095C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue_1;         // 0x0968(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0974(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x09FC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue_2;         // 0x0A84(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_2;  // 0x0A90(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue_3;         // 0x0B18(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B24[0x4];                                      // 0x0B24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0B28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_3;  // 0x0B30(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AMP_PlayerController_C*                 K2Node_DynamicCast_AsMP_Player_Controller;         // 0x0BB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0BC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0BC1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client) == 0x000010, "Wrong alignment on VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client");
static_assert(sizeof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client) == 0x000BD0, "Wrong size on VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, EntryPoint) == 0x000000, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::EntryPoint' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputActionEvent_Key) == 0x000008, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, Temp_struct_Variable) == 0x000020, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_MakeVector_ReturnValue) == 0x000038, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_MakeVector_ReturnValue_1) == 0x000044, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_MakeVector_ReturnValue_2) == 0x000050, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_MakeStruct_HE_Subtitle) == 0x000060, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_MakeStruct_HE_Subtitle' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_MakeArray_Array) == 0x0000B8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_MakeStruct_HE_SubtitleSeq) == 0x0000C8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_MakeStruct_HE_SubtitleSeq' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputActionEvent_Key_6) == 0x0000E0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputActionEvent_Key_6' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputActionEvent_Key_1) == 0x0000F8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputActionEvent_Key_7) == 0x000110, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputActionEvent_Key_7' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_CanAction_Variable) == 0x000128, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_CanAction_Variable' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_IsValid_ReturnValue) == 0x000129, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_CanAction_Variable_1) == 0x00012A, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_CanAction_Variable_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, Temp_object_Variable) == 0x000130, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_IsValid_ReturnValue_1) == 0x000140, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_IsValid_ReturnValue_2) == 0x000141, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, Temp_bool_Variable) == 0x000142, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputActionEvent_Key_2) == 0x000148, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_IsLocallyControlled_ReturnValue) == 0x000160, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_AddRelativeLocation_SweepHitResult) == 0x000164, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_AddRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_AddRelativeLocation_SweepHitResult_1) == 0x0001EC, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_AddRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetOrientationAndPosition_DeviceRotation) == 0x000274, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetOrientationAndPosition_DeviceRotation' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetOrientationAndPosition_DevicePosition) == 0x000280, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetOrientationAndPosition_DevicePosition' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00028C, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, Temp_struct_Variable_1) == 0x000298, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_MakeTransform_ReturnValue) == 0x0002B0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputActionEvent_Key_8) == 0x0002E0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputActionEvent_Key_8' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputActionEvent_Key_9) == 0x0002F8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputActionEvent_Key_9' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputAxisEvent_AxisValue_6) == 0x000310, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputAxisEvent_AxisValue_6' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000314, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_Abs_ReturnValue) == 0x000318, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00031C, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputAxisEvent_AxisValue_5) == 0x000320, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputAxisEvent_AxisValue_5' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_CustomEvent_Enable) == 0x000324, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_CustomEvent_Enable' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_SetTimer_ReturnValue) == 0x000328, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_IsValid_ReturnValue_3) == 0x000330, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetObjectClass_ReturnValue) == 0x000338, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_CustomEvent_left_hand___1) == 0x000340, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_CustomEvent_left_hand___1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_CustomEvent_value_1) == 0x000341, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_CustomEvent_value_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_CustomEvent_left_hand__) == 0x000342, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_CustomEvent_left_hand__' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_CustomEvent_value) == 0x000343, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_CustomEvent_value' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputAxisEvent_AxisValue_4) == 0x000344, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputAxisEvent_AxisValue_4' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputAxisEvent_AxisValue_3) == 0x000348, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputAxisEvent_AxisValue_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetAnimInstance_ReturnValue) == 0x000350, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputAxisEvent_AxisValue_2) == 0x000358, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputAxisEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_DynamicCast_AsVRArms_Anim_BP) == 0x000360, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_DynamicCast_AsVRArms_Anim_BP' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_DynamicCast_bSuccess) == 0x000368, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_Create_ReturnValue) == 0x000370, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetRightVector_ReturnValue) == 0x000378, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetForwardVector_ReturnValue) == 0x000384, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_IsHeadMountedDisplayEnabled_ReturnValue) == 0x000390, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_IsHeadMountedDisplayEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_Create_ReturnValue_1) == 0x000398, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, Temp_struct_Variable_2) == 0x0003A0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x0003B8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_CustomEvent_IsRightHand) == 0x0003B9, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_CustomEvent_IsRightHand' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_CustomEvent_Gesture) == 0x0003BC, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_CustomEvent_Gesture' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputAxisEvent_AxisValue_1) == 0x0003C4, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0003C8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0003CC, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0003D0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_MakeRotator_ReturnValue) == 0x0003D4, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Select_Default) == 0x0003E0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0003E4, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_MakeRotator_ReturnValue_1) == 0x0003E8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputAxisEvent_AxisValue) == 0x0003F4, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputActionEvent_Key_3) == 0x0003F8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000410, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_DynamicCast_AsVRPlayer_Anim_BP) == 0x000418, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_DynamicCast_AsVRPlayer_Anim_BP' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_DynamicCast_bSuccess_1) == 0x000420, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_IsVisible) == 0x000421, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_IsVisible' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_Text) == 0x000428, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_Text' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_Direction) == 0x000440, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_Direction' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_First) == 0x000441, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_First' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_Hide_1) == 0x000442, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_Hide_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_Hide) == 0x000443, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_Hide' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_ItemClass) == 0x000448, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_ItemClass' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000450, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_NotEqual_ClassClass_ReturnValue) == 0x000458, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_NotEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_FinishSpawningActor_ReturnValue) == 0x000460, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_Fear) == 0x000468, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_Fear' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_DeltaSeconds) == 0x000480, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000484, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00050C, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_SphereTraceSingle_OutHit) == 0x000518, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_SphereTraceSingle_ReturnValue) == 0x0005A0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_bBlockingHit) == 0x0005A1, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_bInitialOverlap) == 0x0005A2, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_Time) == 0x0005A4, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_Distance) == 0x0005A8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_Location) == 0x0005AC, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_ImpactPoint) == 0x0005B8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_Normal) == 0x0005C4, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_ImpactNormal) == 0x0005D0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_PhysMat) == 0x0005E0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_HitActor) == 0x0005E8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_HitComponent) == 0x0005F0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_HitBoneName) == 0x0005F8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_HitItem) == 0x000600, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_ElementIndex) == 0x000604, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_FaceIndex) == 0x000608, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_TraceStart) == 0x00060C, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakHitResult_TraceEnd) == 0x000618, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_HalfHeightAdjust_1) == 0x000624, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_HalfHeightAdjust_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_ScaledHalfHeightAdjust_1) == 0x000628, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_ScaledHalfHeightAdjust_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_HalfHeightAdjust) == 0x00062C, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_Event_ScaledHalfHeightAdjust) == 0x000630, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_Event_ScaledHalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputActionEvent_Key_4) == 0x000638, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000650, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000654, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_IsLocallyControlled_ReturnValue_2) == 0x000658, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_IsLocallyControlled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_IsLocallyControlled_ReturnValue_3) == 0x000659, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_IsLocallyControlled_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, Temp_bool_Has_Been_Initd_Variable) == 0x00065A, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_InputActionEvent_Key_5) == 0x000660, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_InputActionEvent_Key_5' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, Temp_struct_Variable_3) == 0x000678, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x000690, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_SetRelativeLocation_SweepHitResult_2) == 0x000718, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_SetRelativeLocation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakVector_X) == 0x0007A0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakVector_Y) == 0x0007A4, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_BreakVector_Z) == 0x0007A8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_MakeVector_ReturnValue_3) == 0x0007AC, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x0007B8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_SetRelativeLocation_SweepHitResult_3) == 0x0007C0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_SetRelativeLocation_SweepHitResult_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_EnableHMD_ReturnValue) == 0x000848, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_EnableHMD_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_AddRelativeRotation_SweepHitResult) == 0x00084C, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_AddRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_AddRelativeRotation_SweepHitResult_1) == 0x0008D4, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_AddRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetControlRotation_ReturnValue) == 0x00095C, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetControlRotation_ReturnValue_1) == 0x000968, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetControlRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000974, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x0009FC, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetControlRotation_ReturnValue_2) == 0x000A84, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetControlRotation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_SetRelativeRotation_SweepHitResult_2) == 0x000A90, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_SetRelativeRotation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetControlRotation_ReturnValue_3) == 0x000B18, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetControlRotation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_GetPlayerController_ReturnValue) == 0x000B28, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, CallFunc_K2_SetRelativeRotation_SweepHitResult_3) == 0x000B30, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::CallFunc_K2_SetRelativeRotation_SweepHitResult_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_DynamicCast_AsMP_Player_Controller) == 0x000BB8, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_DynamicCast_AsMP_Player_Controller' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, K2Node_DynamicCast_bSuccess_2) == 0x000BC0, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client, Temp_bool_IsClosed_Variable) == 0x000BC1, "Member 'VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client::Temp_bool_IsClosed_Variable' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.UpdateGesture
// 0x000C (0x000C - 0x0000)
struct VRCharacter_Demo_Client_C_UpdateGesture final
{
public:
	bool                                          IsRightHand;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Gesture;                                           // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_UpdateGesture) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_UpdateGesture");
static_assert(sizeof(VRCharacter_Demo_Client_C_UpdateGesture) == 0x00000C, "Wrong size on VRCharacter_Demo_Client_C_UpdateGesture");
static_assert(offsetof(VRCharacter_Demo_Client_C_UpdateGesture, IsRightHand) == 0x000000, "Member 'VRCharacter_Demo_Client_C_UpdateGesture::IsRightHand' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_UpdateGesture, Gesture) == 0x000004, "Member 'VRCharacter_Demo_Client_C_UpdateGesture::Gesture' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0
// 0x0004 (0x0004 - 0x0000)
struct VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0) == 0x000004, "Wrong size on VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0, AxisValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0::AxisValue' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1
// 0x0004 (0x0004 - 0x0000)
struct VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1) == 0x000004, "Wrong size on VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1, AxisValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1::AxisValue' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2
// 0x0004 (0x0004 - 0x0000)
struct VRCharacter_Demo_Client_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2) == 0x000004, "Wrong size on VRCharacter_Demo_Client_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2, AxisValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2::AxisValue' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Alter Finger Curl State MC
// 0x0002 (0x0002 - 0x0000)
struct VRCharacter_Demo_Client_C_Alter_Finger_Curl_State_MC final
{
public:
	bool                                          Left_hand__;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Value;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_Alter_Finger_Curl_State_MC) == 0x000001, "Wrong alignment on VRCharacter_Demo_Client_C_Alter_Finger_Curl_State_MC");
static_assert(sizeof(VRCharacter_Demo_Client_C_Alter_Finger_Curl_State_MC) == 0x000002, "Wrong size on VRCharacter_Demo_Client_C_Alter_Finger_Curl_State_MC");
static_assert(offsetof(VRCharacter_Demo_Client_C_Alter_Finger_Curl_State_MC, Left_hand__) == 0x000000, "Member 'VRCharacter_Demo_Client_C_Alter_Finger_Curl_State_MC::Left_hand__' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Alter_Finger_Curl_State_MC, Value) == 0x000001, "Member 'VRCharacter_Demo_Client_C_Alter_Finger_Curl_State_MC::Value' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Alter Finger Curl State
// 0x0002 (0x0002 - 0x0000)
struct VRCharacter_Demo_Client_C_Alter_Finger_Curl_State final
{
public:
	bool                                          Left_hand__;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Value;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_Alter_Finger_Curl_State) == 0x000001, "Wrong alignment on VRCharacter_Demo_Client_C_Alter_Finger_Curl_State");
static_assert(sizeof(VRCharacter_Demo_Client_C_Alter_Finger_Curl_State) == 0x000002, "Wrong size on VRCharacter_Demo_Client_C_Alter_Finger_Curl_State");
static_assert(offsetof(VRCharacter_Demo_Client_C_Alter_Finger_Curl_State, Left_hand__) == 0x000000, "Member 'VRCharacter_Demo_Client_C_Alter_Finger_Curl_State::Left_hand__' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Alter_Finger_Curl_State, Value) == 0x000001, "Member 'VRCharacter_Demo_Client_C_Alter_Finger_Curl_State::Value' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.StartInteracting
// 0x0001 (0x0001 - 0x0000)
struct VRCharacter_Demo_Client_C_StartInteracting final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_StartInteracting) == 0x000001, "Wrong alignment on VRCharacter_Demo_Client_C_StartInteracting");
static_assert(sizeof(VRCharacter_Demo_Client_C_StartInteracting) == 0x000001, "Wrong size on VRCharacter_Demo_Client_C_StartInteracting");
static_assert(offsetof(VRCharacter_Demo_Client_C_StartInteracting, Enable) == 0x000000, "Member 'VRCharacter_Demo_Client_C_StartInteracting::Enable' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3
// 0x0004 (0x0004 - 0x0000)
struct VRCharacter_Demo_Client_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3) == 0x000004, "Wrong size on VRCharacter_Demo_Client_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3, AxisValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3::AxisValue' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4
// 0x0004 (0x0004 - 0x0000)
struct VRCharacter_Demo_Client_C_InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4) == 0x000004, "Wrong size on VRCharacter_Demo_Client_C_InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4, AxisValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4::AxisValue' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Secondary_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_0");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_0");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Secondary_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_1");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_1");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_ResetVR_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_InpActEvt_ResetVR_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpActEvt_ResetVR_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_InpActEvt_ResetVR_K2Node_InputActionEvent_2");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpActEvt_ResetVR_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_InpActEvt_ResetVR_K2Node_InputActionEvent_2");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpActEvt_ResetVR_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpActEvt_ResetVR_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Sprint_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_3");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_3");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Sprint_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_4");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_4");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_4, Key) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_4::Key' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Inventory_K2Node_InputActionEvent_5
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_InpActEvt_Inventory_K2Node_InputActionEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpActEvt_Inventory_K2Node_InputActionEvent_5) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_InpActEvt_Inventory_K2Node_InputActionEvent_5");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpActEvt_Inventory_K2Node_InputActionEvent_5) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_InpActEvt_Inventory_K2Node_InputActionEvent_5");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpActEvt_Inventory_K2Node_InputActionEvent_5, Key) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpActEvt_Inventory_K2Node_InputActionEvent_5::Key' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Interact_K2Node_InputActionEvent_6
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_6 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_6) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_6");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_6) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_6");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_6, Key) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_6::Key' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Interact_K2Node_InputActionEvent_7
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_7 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_7) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_7");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_7) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_7");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_7, Key) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_7::Key' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Use_K2Node_InputActionEvent_8
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_8 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_8) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_8");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_8) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_8");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_8, Key) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_8::Key' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Use_K2Node_InputActionEvent_9
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_9 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_9) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_9");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_9) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_9");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_9, Key) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_9::Key' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.TickHeadsetLocation
// 0x0194 (0x0194 - 0x0000)
struct VRCharacter_Demo_Client_C_TickHeadsetLocation final
{
public:
	struct FRotator                               CallFunc_GetOrientationAndPosition_DeviceRotation; // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetOrientationAndPosition_DevicePosition; // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0054(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x00E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_GetOrientationAndPosition_DeviceRotation_1; // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetOrientationAndPosition_DevicePosition_1; // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_TickHeadsetLocation) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_TickHeadsetLocation");
static_assert(sizeof(VRCharacter_Demo_Client_C_TickHeadsetLocation) == 0x000194, "Wrong size on VRCharacter_Demo_Client_C_TickHeadsetLocation");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_GetOrientationAndPosition_DeviceRotation) == 0x000000, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_GetOrientationAndPosition_DeviceRotation' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_GetOrientationAndPosition_DevicePosition) == 0x00000C, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_GetOrientationAndPosition_DevicePosition' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000018, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_BreakRotator_Roll) == 0x000024, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_BreakRotator_Pitch) == 0x000028, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_BreakRotator_Yaw) == 0x00002C, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_MakeRotator_ReturnValue) == 0x00003C, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_BreakVector_X) == 0x000048, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_BreakVector_Y) == 0x00004C, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_BreakVector_Z) == 0x000050, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000054, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_MakeVector_ReturnValue) == 0x0000DC, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0000E8, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_GetOrientationAndPosition_DeviceRotation_1) == 0x000170, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_GetOrientationAndPosition_DeviceRotation_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_GetOrientationAndPosition_DevicePosition_1) == 0x00017C, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_GetOrientationAndPosition_DevicePosition_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickHeadsetLocation, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000188, "Member 'VRCharacter_Demo_Client_C_TickHeadsetLocation::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.SetupWidget
// 0x0014 (0x0014 - 0x0000)
struct VRCharacter_Demo_Client_C_SetupWidget final
{
public:
	bool                                          DesiredSize;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_SetupWidget) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_SetupWidget");
static_assert(sizeof(VRCharacter_Demo_Client_C_SetupWidget) == 0x000014, "Wrong size on VRCharacter_Demo_Client_C_SetupWidget");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetupWidget, DesiredSize) == 0x000000, "Member 'VRCharacter_Demo_Client_C_SetupWidget::DesiredSize' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetupWidget, Scale) == 0x000004, "Member 'VRCharacter_Demo_Client_C_SetupWidget::Scale' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetupWidget, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000008, "Member 'VRCharacter_Demo_Client_C_SetupWidget::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ToggleWidgetInteraction
// 0x0028 (0x0028 - 0x0000)
struct VRCharacter_Demo_Client_C_ToggleWidgetInteraction final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue_1;        // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_ToggleWidgetInteraction) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_ToggleWidgetInteraction");
static_assert(sizeof(VRCharacter_Demo_Client_C_ToggleWidgetInteraction) == 0x000028, "Wrong size on VRCharacter_Demo_Client_C_ToggleWidgetInteraction");
static_assert(offsetof(VRCharacter_Demo_Client_C_ToggleWidgetInteraction, Enable) == 0x000000, "Member 'VRCharacter_Demo_Client_C_ToggleWidgetInteraction::Enable' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ToggleWidgetInteraction, CallFunc_SpawnSystemAttached_ReturnValue) == 0x000008, "Member 'VRCharacter_Demo_Client_C_ToggleWidgetInteraction::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ToggleWidgetInteraction, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'VRCharacter_Demo_Client_C_ToggleWidgetInteraction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ToggleWidgetInteraction, CallFunc_SpawnSystemAttached_ReturnValue_1) == 0x000018, "Member 'VRCharacter_Demo_Client_C_ToggleWidgetInteraction::CallFunc_SpawnSystemAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ToggleWidgetInteraction, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'VRCharacter_Demo_Client_C_ToggleWidgetInteraction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ToggleWidgetInteraction, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'VRCharacter_Demo_Client_C_ToggleWidgetInteraction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ToggleWidgetInteraction, CallFunc_IsValid_ReturnValue_2) == 0x000022, "Member 'VRCharacter_Demo_Client_C_ToggleWidgetInteraction::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ToggleWidgetInteraction, CallFunc_IsValid_ReturnValue_3) == 0x000023, "Member 'VRCharacter_Demo_Client_C_ToggleWidgetInteraction::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.UpdatePlayerCamera
// 0x0008 (0x0008 - 0x0000)
struct VRCharacter_Demo_Client_C_UpdatePlayerCamera final
{
public:
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_UpdatePlayerCamera) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_UpdatePlayerCamera");
static_assert(sizeof(VRCharacter_Demo_Client_C_UpdatePlayerCamera) == 0x000008, "Wrong size on VRCharacter_Demo_Client_C_UpdatePlayerCamera");
static_assert(offsetof(VRCharacter_Demo_Client_C_UpdatePlayerCamera, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_UpdatePlayerCamera::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Update Beam
// 0x0260 (0x0260 - 0x0000)
struct VRCharacter_Demo_Client_C_Update_Beam final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetLastHitResult_ReturnValue;             // 0x0010(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverHitTestVisibleWidget_ReturnValue;   // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_GetLastHitResult_ReturnValue_1;           // 0x0134(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CA[0x2];                                      // 0x01CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0218(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverHitTestVisibleWidget_ReturnValue_1; // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_Update_Beam) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_Update_Beam");
static_assert(sizeof(VRCharacter_Demo_Client_C_Update_Beam) == 0x000260, "Wrong size on VRCharacter_Demo_Client_C_Update_Beam");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_MakeVector_ReturnValue) == 0x000004, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_GetLastHitResult_ReturnValue) == 0x000010, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_GetLastHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_bBlockingHit) == 0x000098, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_bInitialOverlap) == 0x000099, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_Time) == 0x00009C, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_Distance) == 0x0000A0, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_Location) == 0x0000A4, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_ImpactPoint) == 0x0000B0, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_Normal) == 0x0000BC, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_ImpactNormal) == 0x0000C8, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_PhysMat) == 0x0000D8, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_HitActor) == 0x0000E0, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_HitComponent) == 0x0000E8, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_HitBoneName) == 0x0000F0, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_HitItem) == 0x0000F8, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_ElementIndex) == 0x0000FC, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_FaceIndex) == 0x000100, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_TraceStart) == 0x000104, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_TraceEnd) == 0x000110, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_IsOverHitTestVisibleWidget_ReturnValue) == 0x00011C, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_IsOverHitTestVisibleWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_Add_FloatFloat_ReturnValue) == 0x000120, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_MakeVector_ReturnValue_1) == 0x000124, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_IsValid_ReturnValue_1) == 0x000130, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_GetLastHitResult_ReturnValue_1) == 0x000134, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_GetLastHitResult_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_MakeVector_ReturnValue_2) == 0x0001BC, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0001C8, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0001C9, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_Time_1) == 0x0001CC, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_Distance_1) == 0x0001D0, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_Location_1) == 0x0001D4, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0001E0, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_Normal_1) == 0x0001EC, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0001F8, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_PhysMat_1) == 0x000208, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_HitActor_1) == 0x000210, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_HitComponent_1) == 0x000218, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_HitBoneName_1) == 0x000220, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_HitItem_1) == 0x000228, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_ElementIndex_1) == 0x00022C, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_FaceIndex_1) == 0x000230, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_TraceStart_1) == 0x000234, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_BreakHitResult_TraceEnd_1) == 0x000240, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00024C, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_IsOverHitTestVisibleWidget_ReturnValue_1) == 0x000250, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_IsOverHitTestVisibleWidget_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Update_Beam, CallFunc_MakeVector_ReturnValue_3) == 0x000254, "Member 'VRCharacter_Demo_Client_C_Update_Beam::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.TickGesture
// 0x0014 (0x0014 - 0x0000)
struct VRCharacter_Demo_Client_C_TickGesture final
{
public:
	class FName                                   CallFunc_DetectCurrentGesture_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_DetectCurrentGesture_ReturnValue_1;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_1;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetActionPose_ReturnValue;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetActionPose_ReturnValue_1;              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_TickGesture) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_TickGesture");
static_assert(sizeof(VRCharacter_Demo_Client_C_TickGesture) == 0x000014, "Wrong size on VRCharacter_Demo_Client_C_TickGesture");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickGesture, CallFunc_DetectCurrentGesture_ReturnValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_TickGesture::CallFunc_DetectCurrentGesture_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickGesture, CallFunc_DetectCurrentGesture_ReturnValue_1) == 0x000008, "Member 'VRCharacter_Demo_Client_C_TickGesture::CallFunc_DetectCurrentGesture_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickGesture, CallFunc_NotEqual_NameName_ReturnValue) == 0x000010, "Member 'VRCharacter_Demo_Client_C_TickGesture::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickGesture, CallFunc_NotEqual_NameName_ReturnValue_1) == 0x000011, "Member 'VRCharacter_Demo_Client_C_TickGesture::CallFunc_NotEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickGesture, CallFunc_GetActionPose_ReturnValue) == 0x000012, "Member 'VRCharacter_Demo_Client_C_TickGesture::CallFunc_GetActionPose_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_TickGesture, CallFunc_GetActionPose_ReturnValue_1) == 0x000013, "Member 'VRCharacter_Demo_Client_C_TickGesture::CallFunc_GetActionPose_ReturnValue_1' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.RemoveVHS
// 0x0020 (0x0020 - 0x0000)
struct VRCharacter_Demo_Client_C_RemoveVHS final
{
public:
	TArray<struct FWeightedBlendable>             K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm)
	struct FWeightedBlendables                    K2Node_MakeStruct_WeightedBlendables;              // 0x0010(0x0010)()
};
static_assert(alignof(VRCharacter_Demo_Client_C_RemoveVHS) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_RemoveVHS");
static_assert(sizeof(VRCharacter_Demo_Client_C_RemoveVHS) == 0x000020, "Wrong size on VRCharacter_Demo_Client_C_RemoveVHS");
static_assert(offsetof(VRCharacter_Demo_Client_C_RemoveVHS, K2Node_MakeArray_Array) == 0x000000, "Member 'VRCharacter_Demo_Client_C_RemoveVHS::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_RemoveVHS, K2Node_MakeStruct_WeightedBlendables) == 0x000010, "Member 'VRCharacter_Demo_Client_C_RemoveVHS::K2Node_MakeStruct_WeightedBlendables' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.StartBalance
// 0x0002 (0x0002 - 0x0000)
struct VRCharacter_Demo_Client_C_StartBalance final
{
public:
	bool                                          Direction;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          First;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_StartBalance) == 0x000001, "Wrong alignment on VRCharacter_Demo_Client_C_StartBalance");
static_assert(sizeof(VRCharacter_Demo_Client_C_StartBalance) == 0x000002, "Wrong size on VRCharacter_Demo_Client_C_StartBalance");
static_assert(offsetof(VRCharacter_Demo_Client_C_StartBalance, Direction) == 0x000000, "Member 'VRCharacter_Demo_Client_C_StartBalance::Direction' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_StartBalance, First) == 0x000001, "Member 'VRCharacter_Demo_Client_C_StartBalance::First' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.K2_OnEndCrouch
// 0x0008 (0x0008 - 0x0000)
struct VRCharacter_Demo_Client_C_K2_OnEndCrouch final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_K2_OnEndCrouch) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_K2_OnEndCrouch");
static_assert(sizeof(VRCharacter_Demo_Client_C_K2_OnEndCrouch) == 0x000008, "Wrong size on VRCharacter_Demo_Client_C_K2_OnEndCrouch");
static_assert(offsetof(VRCharacter_Demo_Client_C_K2_OnEndCrouch, HalfHeightAdjust) == 0x000000, "Member 'VRCharacter_Demo_Client_C_K2_OnEndCrouch::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_K2_OnEndCrouch, ScaledHalfHeightAdjust) == 0x000004, "Member 'VRCharacter_Demo_Client_C_K2_OnEndCrouch::ScaledHalfHeightAdjust' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.K2_OnStartCrouch
// 0x0008 (0x0008 - 0x0000)
struct VRCharacter_Demo_Client_C_K2_OnStartCrouch final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_K2_OnStartCrouch) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_K2_OnStartCrouch");
static_assert(sizeof(VRCharacter_Demo_Client_C_K2_OnStartCrouch) == 0x000008, "Wrong size on VRCharacter_Demo_Client_C_K2_OnStartCrouch");
static_assert(offsetof(VRCharacter_Demo_Client_C_K2_OnStartCrouch, HalfHeightAdjust) == 0x000000, "Member 'VRCharacter_Demo_Client_C_K2_OnStartCrouch::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_K2_OnStartCrouch, ScaledHalfHeightAdjust) == 0x000004, "Member 'VRCharacter_Demo_Client_C_K2_OnStartCrouch::ScaledHalfHeightAdjust' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ShowInteractText
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_ShowInteractText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(VRCharacter_Demo_Client_C_ShowInteractText) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_ShowInteractText");
static_assert(sizeof(VRCharacter_Demo_Client_C_ShowInteractText) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_ShowInteractText");
static_assert(offsetof(VRCharacter_Demo_Client_C_ShowInteractText, Text) == 0x000000, "Member 'VRCharacter_Demo_Client_C_ShowInteractText::Text' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ChangeCrosshairVisibility
// 0x0001 (0x0001 - 0x0000)
struct VRCharacter_Demo_Client_C_ChangeCrosshairVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_ChangeCrosshairVisibility) == 0x000001, "Wrong alignment on VRCharacter_Demo_Client_C_ChangeCrosshairVisibility");
static_assert(sizeof(VRCharacter_Demo_Client_C_ChangeCrosshairVisibility) == 0x000001, "Wrong size on VRCharacter_Demo_Client_C_ChangeCrosshairVisibility");
static_assert(offsetof(VRCharacter_Demo_Client_C_ChangeCrosshairVisibility, IsVisible) == 0x000000, "Member 'VRCharacter_Demo_Client_C_ChangeCrosshairVisibility::IsVisible' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_157
// 0x0004 (0x0004 - 0x0000)
struct VRCharacter_Demo_Client_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157) == 0x000004, "Wrong size on VRCharacter_Demo_Client_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157, AxisValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157::AxisValue' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_172
// 0x0004 (0x0004 - 0x0000)
struct VRCharacter_Demo_Client_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172");
static_assert(sizeof(VRCharacter_Demo_Client_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172) == 0x000004, "Wrong size on VRCharacter_Demo_Client_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172");
static_assert(offsetof(VRCharacter_Demo_Client_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172, AxisValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172::AxisValue' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Fear
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_Fear final
{
public:
	struct FHE_Fear                               Param_Fear_0;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_Fear) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_Fear");
static_assert(sizeof(VRCharacter_Demo_Client_C_Fear) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_Fear");
static_assert(offsetof(VRCharacter_Demo_Client_C_Fear, Param_Fear_0) == 0x000000, "Member 'VRCharacter_Demo_Client_C_Fear::Param_Fear_0' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.HideLeftArm
// 0x0001 (0x0001 - 0x0000)
struct VRCharacter_Demo_Client_C_HideLeftArm final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_HideLeftArm) == 0x000001, "Wrong alignment on VRCharacter_Demo_Client_C_HideLeftArm");
static_assert(sizeof(VRCharacter_Demo_Client_C_HideLeftArm) == 0x000001, "Wrong size on VRCharacter_Demo_Client_C_HideLeftArm");
static_assert(offsetof(VRCharacter_Demo_Client_C_HideLeftArm, Hide) == 0x000000, "Member 'VRCharacter_Demo_Client_C_HideLeftArm::Hide' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.HideRightArm
// 0x0001 (0x0001 - 0x0000)
struct VRCharacter_Demo_Client_C_HideRightArm final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_HideRightArm) == 0x000001, "Wrong alignment on VRCharacter_Demo_Client_C_HideRightArm");
static_assert(sizeof(VRCharacter_Demo_Client_C_HideRightArm) == 0x000001, "Wrong size on VRCharacter_Demo_Client_C_HideRightArm");
static_assert(offsetof(VRCharacter_Demo_Client_C_HideRightArm, Hide) == 0x000000, "Member 'VRCharacter_Demo_Client_C_HideRightArm::Hide' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct VRCharacter_Demo_Client_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_ReceiveTick) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_ReceiveTick");
static_assert(sizeof(VRCharacter_Demo_Client_C_ReceiveTick) == 0x000004, "Wrong size on VRCharacter_Demo_Client_C_ReceiveTick");
static_assert(offsetof(VRCharacter_Demo_Client_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'VRCharacter_Demo_Client_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.SpawnEquipItem_SERVER
// 0x0008 (0x0008 - 0x0000)
struct VRCharacter_Demo_Client_C_SpawnEquipItem_SERVER final
{
public:
	class UClass*                                 ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_SpawnEquipItem_SERVER) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_SpawnEquipItem_SERVER");
static_assert(sizeof(VRCharacter_Demo_Client_C_SpawnEquipItem_SERVER) == 0x000008, "Wrong size on VRCharacter_Demo_Client_C_SpawnEquipItem_SERVER");
static_assert(offsetof(VRCharacter_Demo_Client_C_SpawnEquipItem_SERVER, ItemClass) == 0x000000, "Member 'VRCharacter_Demo_Client_C_SpawnEquipItem_SERVER::ItemClass' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.UserConstructionScript
// 0x0001 (0x0001 - 0x0000)
struct VRCharacter_Demo_Client_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_UserConstructionScript) == 0x000001, "Wrong alignment on VRCharacter_Demo_Client_C_UserConstructionScript");
static_assert(sizeof(VRCharacter_Demo_Client_C_UserConstructionScript) == 0x000001, "Wrong size on VRCharacter_Demo_Client_C_UserConstructionScript");
static_assert(offsetof(VRCharacter_Demo_Client_C_UserConstructionScript, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_UserConstructionScript::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.SetPostProcessing
// 0x0024 (0x0024 - 0x0000)
struct VRCharacter_Demo_Client_C_SetPostProcessing final
{
public:
	float                                         Chromatic_Distance;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tracking_Noise_Level;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Signal_Distortion_Intensity;                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Color_Tornado_Intensity;                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Warp_Belt_Intensity;                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Screen_Hop_Frequency;                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Random_Horizontal_Offset_Frequency;                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Screen_Hop_Intensity;                              // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Random_Horizontal_Offset_Strength;                 // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_SetPostProcessing) == 0x000004, "Wrong alignment on VRCharacter_Demo_Client_C_SetPostProcessing");
static_assert(sizeof(VRCharacter_Demo_Client_C_SetPostProcessing) == 0x000024, "Wrong size on VRCharacter_Demo_Client_C_SetPostProcessing");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetPostProcessing, Chromatic_Distance) == 0x000000, "Member 'VRCharacter_Demo_Client_C_SetPostProcessing::Chromatic_Distance' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetPostProcessing, Tracking_Noise_Level) == 0x000004, "Member 'VRCharacter_Demo_Client_C_SetPostProcessing::Tracking_Noise_Level' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetPostProcessing, Signal_Distortion_Intensity) == 0x000008, "Member 'VRCharacter_Demo_Client_C_SetPostProcessing::Signal_Distortion_Intensity' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetPostProcessing, Color_Tornado_Intensity) == 0x00000C, "Member 'VRCharacter_Demo_Client_C_SetPostProcessing::Color_Tornado_Intensity' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetPostProcessing, Warp_Belt_Intensity) == 0x000010, "Member 'VRCharacter_Demo_Client_C_SetPostProcessing::Warp_Belt_Intensity' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetPostProcessing, Screen_Hop_Frequency) == 0x000014, "Member 'VRCharacter_Demo_Client_C_SetPostProcessing::Screen_Hop_Frequency' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetPostProcessing, Random_Horizontal_Offset_Frequency) == 0x000018, "Member 'VRCharacter_Demo_Client_C_SetPostProcessing::Random_Horizontal_Offset_Frequency' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetPostProcessing, Screen_Hop_Intensity) == 0x00001C, "Member 'VRCharacter_Demo_Client_C_SetPostProcessing::Screen_Hop_Intensity' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_SetPostProcessing, Random_Horizontal_Offset_Strength) == 0x000020, "Member 'VRCharacter_Demo_Client_C_SetPostProcessing::Random_Horizontal_Offset_Strength' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Toggle Post Processing
// 0x0001 (0x0001 - 0x0000)
struct VRCharacter_Demo_Client_C_Toggle_Post_Processing final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_Toggle_Post_Processing) == 0x000001, "Wrong alignment on VRCharacter_Demo_Client_C_Toggle_Post_Processing");
static_assert(sizeof(VRCharacter_Demo_Client_C_Toggle_Post_Processing) == 0x000001, "Wrong size on VRCharacter_Demo_Client_C_Toggle_Post_Processing");
static_assert(offsetof(VRCharacter_Demo_Client_C_Toggle_Post_Processing, Activated) == 0x000000, "Member 'VRCharacter_Demo_Client_C_Toggle_Post_Processing::Activated' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.CheckStamina
// 0x0018 (0x0018 - 0x0000)
struct VRCharacter_Demo_Client_C_CheckStamina final
{
public:
	float                                         CallFunc_GetInputAxisValue_ReturnValue;            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSprint_CanSprint;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFancyMovementComponent*                K2Node_DynamicCast_AsFancy_Movement_Component;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_CheckStamina) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_CheckStamina");
static_assert(sizeof(VRCharacter_Demo_Client_C_CheckStamina) == 0x000018, "Wrong size on VRCharacter_Demo_Client_C_CheckStamina");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckStamina, CallFunc_GetInputAxisValue_ReturnValue) == 0x000000, "Member 'VRCharacter_Demo_Client_C_CheckStamina::CallFunc_GetInputAxisValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckStamina, CallFunc_CanSprint_CanSprint) == 0x000004, "Member 'VRCharacter_Demo_Client_C_CheckStamina::CallFunc_CanSprint_CanSprint' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckStamina, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000005, "Member 'VRCharacter_Demo_Client_C_CheckStamina::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckStamina, K2Node_DynamicCast_AsFancy_Movement_Component) == 0x000008, "Member 'VRCharacter_Demo_Client_C_CheckStamina::K2Node_DynamicCast_AsFancy_Movement_Component' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckStamina, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'VRCharacter_Demo_Client_C_CheckStamina::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Headshake
// 0x0318 (0x0318 - 0x0000)
struct VRCharacter_Demo_Client_C_Headshake final
{
public:
	EFootstepActionsEnum                          FootstepType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithTag_OutActors;            // 0x0038(0x0010)(ReferenceParm)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_2;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_3;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0080(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_126[0x2];                                      // 0x0126(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_4;              // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_5;              // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit_1;               // 0x01E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue_1;          // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0272(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0273(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x02C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable_1;                              // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default;                             // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default_1;                           // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0308(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue_1;       // 0x0310(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VRCharacter_Demo_Client_C_Headshake) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_Headshake");
static_assert(sizeof(VRCharacter_Demo_Client_C_Headshake) == 0x000318, "Wrong size on VRCharacter_Demo_Client_C_Headshake");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, FootstepType) == 0x000000, "Member 'VRCharacter_Demo_Client_C_Headshake::FootstepType' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'VRCharacter_Demo_Client_C_Headshake::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, Temp_object_Variable) == 0x000008, "Member 'VRCharacter_Demo_Client_C_Headshake::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_GetPlayerPawn_ReturnValue) == 0x000018, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, Temp_object_Variable_1) == 0x000020, "Member 'VRCharacter_Demo_Client_C_Headshake::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000030, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_GetAllActorsWithTag_OutActors) == 0x000038, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_GetAllActorsWithTag_OutActors' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, Temp_byte_Variable) == 0x000048, "Member 'VRCharacter_Demo_Client_C_Headshake::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_GetPlayerPawn_ReturnValue_2) == 0x000050, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_GetPlayerPawn_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, Temp_object_Variable_2) == 0x000058, "Member 'VRCharacter_Demo_Client_C_Headshake::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000060, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00006C, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_GetPlayerPawn_ReturnValue_3) == 0x000078, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_GetPlayerPawn_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_SphereTraceSingle_OutHit) == 0x000080, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_SphereTraceSingle_ReturnValue) == 0x000108, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00010C, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000118, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_bBlockingHit) == 0x000124, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_bInitialOverlap) == 0x000125, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_Time) == 0x000128, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_Distance) == 0x00012C, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_Location) == 0x000130, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_ImpactPoint) == 0x00013C, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_Normal) == 0x000148, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_ImpactNormal) == 0x000154, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_PhysMat) == 0x000160, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_HitActor) == 0x000168, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_HitComponent) == 0x000170, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_HitBoneName) == 0x000178, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_HitItem) == 0x000180, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_ElementIndex) == 0x000184, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_FaceIndex) == 0x000188, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_TraceStart) == 0x00018C, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_TraceEnd) == 0x000198, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_VSize_ReturnValue) == 0x0001A4, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001A8, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_GetPlayerPawn_ReturnValue_4) == 0x0001B0, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_GetPlayerPawn_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_GetPlayerPawn_ReturnValue_5) == 0x0001B8, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_GetPlayerPawn_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0001C0, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_GetMovementComponent_ReturnValue) == 0x0001D0, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x0001D8, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_IsMovingOnGround_ReturnValue) == 0x0001E4, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_SphereTraceSingle_OutHit_1) == 0x0001E8, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_SphereTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_SphereTraceSingle_ReturnValue_1) == 0x000270, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_SphereTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BooleanAND_ReturnValue_1) == 0x000271, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000272, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000273, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_Time_1) == 0x000274, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_Distance_1) == 0x000278, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_Location_1) == 0x00027C, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000288, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_Normal_1) == 0x000294, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0002A0, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_PhysMat_1) == 0x0002B0, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_HitActor_1) == 0x0002B8, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_HitComponent_1) == 0x0002C0, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_HitBoneName_1) == 0x0002C8, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_HitItem_1) == 0x0002D0, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_ElementIndex_1) == 0x0002D4, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_FaceIndex_1) == 0x0002D8, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_TraceStart_1) == 0x0002DC, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_BreakHitResult_TraceEnd_1) == 0x0002E8, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, Temp_byte_Variable_1) == 0x0002F4, "Member 'VRCharacter_Demo_Client_C_Headshake::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, K2Node_Select_Default) == 0x0002F8, "Member 'VRCharacter_Demo_Client_C_Headshake::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, K2Node_Select_Default_1) == 0x000300, "Member 'VRCharacter_Demo_Client_C_Headshake::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000308, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_Headshake, CallFunc_SpawnSoundAtLocation_ReturnValue_1) == 0x000310, "Member 'VRCharacter_Demo_Client_C_Headshake::CallFunc_SpawnSoundAtLocation_ReturnValue_1' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ToggleCrosshair
// 0x0002 (0x0002 - 0x0000)
struct VRCharacter_Demo_Client_C_ToggleCrosshair final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_ToggleCrosshair) == 0x000001, "Wrong alignment on VRCharacter_Demo_Client_C_ToggleCrosshair");
static_assert(sizeof(VRCharacter_Demo_Client_C_ToggleCrosshair) == 0x000002, "Wrong size on VRCharacter_Demo_Client_C_ToggleCrosshair");
static_assert(offsetof(VRCharacter_Demo_Client_C_ToggleCrosshair, IsVisible) == 0x000000, "Member 'VRCharacter_Demo_Client_C_ToggleCrosshair::IsVisible' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_ToggleCrosshair, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'VRCharacter_Demo_Client_C_ToggleCrosshair::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.CheckFlashlight
// 0x01A0 (0x01A0 - 0x0000)
struct VRCharacter_Demo_Client_C_CheckFlashlight final
{
public:
	class ABP_Item_Flashlight_C*                  K2Node_DynamicCast_AsBP_Item_Flashlight;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Item_Flashlight_C*                  K2Node_DynamicCast_AsBP_Item_Flashlight_1;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVectorInConeInRadians_ReturnValue; // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0058(0x0010)(ConstParm, ReferenceParm)
	class ABP_Item_Flashlight_C*                  K2Node_DynamicCast_AsBP_Item_Flashlight_2;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0074(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FF[0x1];                                       // 0x00FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Moth_C*                             K2Node_DynamicCast_AsBP_Moth;                      // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Hound_C*                            K2Node_DynamicCast_AsBP_Hound;                     // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VRCharacter_Demo_Client_C_CheckFlashlight) == 0x000008, "Wrong alignment on VRCharacter_Demo_Client_C_CheckFlashlight");
static_assert(sizeof(VRCharacter_Demo_Client_C_CheckFlashlight) == 0x0001A0, "Wrong size on VRCharacter_Demo_Client_C_CheckFlashlight");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, K2Node_DynamicCast_AsBP_Item_Flashlight) == 0x000000, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::K2Node_DynamicCast_AsBP_Item_Flashlight' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, K2Node_DynamicCast_AsBP_Item_Flashlight_1) == 0x000010, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::K2Node_DynamicCast_AsBP_Item_Flashlight_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, K2Node_DynamicCast_bSuccess_1) == 0x000018, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_GetForwardVector_ReturnValue) == 0x00001C, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_RandomUnitVectorInConeInRadians_ReturnValue) == 0x000028, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_RandomUnitVectorInConeInRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000034, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_Add_VectorVector_ReturnValue) == 0x00004C, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, Temp_object_Variable) == 0x000058, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, K2Node_DynamicCast_AsBP_Item_Flashlight_2) == 0x000068, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::K2Node_DynamicCast_AsBP_Item_Flashlight_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_LineTraceSingle_OutHit) == 0x000074, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_LineTraceSingle_ReturnValue) == 0x0000FC, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_bBlockingHit) == 0x0000FD, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000FE, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_Time) == 0x000100, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_Distance) == 0x000104, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_Location) == 0x000108, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_ImpactPoint) == 0x000114, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_Normal) == 0x000120, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_ImpactNormal) == 0x00012C, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_PhysMat) == 0x000138, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_HitActor) == 0x000140, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_HitComponent) == 0x000148, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_HitBoneName) == 0x000150, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_HitItem) == 0x000158, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_ElementIndex) == 0x00015C, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_FaceIndex) == 0x000160, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_TraceStart) == 0x000164, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, CallFunc_BreakHitResult_TraceEnd) == 0x000170, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, K2Node_DynamicCast_AsBP_Moth) == 0x000180, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::K2Node_DynamicCast_AsBP_Moth' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, K2Node_DynamicCast_bSuccess_3) == 0x000188, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, K2Node_DynamicCast_AsBP_Hound) == 0x000190, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::K2Node_DynamicCast_AsBP_Hound' has a wrong offset!");
static_assert(offsetof(VRCharacter_Demo_Client_C_CheckFlashlight, K2Node_DynamicCast_bSuccess_4) == 0x000198, "Member 'VRCharacter_Demo_Client_C_CheckFlashlight::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");

}

