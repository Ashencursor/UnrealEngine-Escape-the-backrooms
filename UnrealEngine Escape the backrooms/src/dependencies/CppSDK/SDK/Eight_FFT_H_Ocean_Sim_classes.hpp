#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Eight_FFT_H_Ocean_Sim

#include "Basic.hpp"

#include "Mesh_Switch_structs.hpp"
#include "Waterline_Cameras_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Dyn_Foam_O_structs.hpp"
#include "Two_FFT_Resolution_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass 8_FFT_H_Ocean_Sim.8_FFT_H_Ocean_Sim_C
// 0x03F0 (0x0610 - 0x0220)
class AEight_FFT_H_Ocean_Sim_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHierarchicalInstancedStaticMeshComponent* Water_GRID_Cine;                                   // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHierarchicalInstancedStaticMeshComponent* Water_GRID_SS;                                     // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHierarchicalInstancedStaticMeshComponent* Water_GRID;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Far_Water_Plane;                                   // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Activation_Box;                                    // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SimCapturte_Volume;                                // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Buoyancy_Volume;                                   // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  Underwater_PostMinusProcess_Volume;                // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PostMinusProcess_Volume;                           // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WaterPlane;                                        // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     One_Water_Surface_Material;                        // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Two_Underwater_Surface_Material;                   // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Three_Underwater_PostMinusProcess_Material;        // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Four_Far_Water_Material;                           // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Detailed_Water_Grid_Size;                          // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distant_Water_Grid_Size;                           // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Height;                                       // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Tile;                                         // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Speed;                                        // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Displacement_Texture;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Water_Level;                                       // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Screen_Offset;                                     // 0x02D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PostMinusProcess_DYN;                              // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Underwater_Surface_DYN;                            // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Water_Surface_DYN;                                 // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Shallow_Water_Sim;                          // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 Height0;                                           // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Height1;                                           // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Height2;                                           // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 HeightfieldNormal;                                 // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Compute_Displacement;                              // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Sim_Capture;                                       // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Simulation_Height;                                 // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Simulation_Range;                                  // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Normal_Texel_Size;                                 // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Simulation_Resolution;                             // 0x033C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Simulation_Texture_Resolution;                     // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HeightState;                                       // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeAccumulator;                                   // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Simulation_Speed;                                  // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastTouchingActorPosition;                         // 0x0350(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sim_Active_;                                       // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35D[0x3];                                      // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Capture_List_Actor;                                // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Velocity_Trigger;                                  // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity;                                           // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Water_Density;                                     // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Buoyancy_Offset;                                   // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         In_Water_Linear_Damping;                           // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         In_Water_Angular_Damping;                          // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Default_Linear_Damping;                            // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Default_Angular_Damping;                           // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Water_Plane_Location;                              // 0x0390(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            Primitives_List;                                   // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                Capture_Location;                                  // 0x03B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Screen_Space_Simulation;                           // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SSSim_Offset;                                      // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Capture_Offset;                                    // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Tags_Simulation;                               // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Normal_Sim_DYN;                                    // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Wave_Sim_DYN;                                      // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Capture_Material;                                  // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Tags_Buoyancy;                                 // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Ph_k__Material;                                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Ph_Minusk__Material;                               // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Z_Calc_Mat;                                        // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     X_Calc_Mat;                                        // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Y_Calc_Mat;                                        // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Ph_k__RT;                                          // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Ph_Minusk__RT;                                     // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Z_Calc_RT;                                         // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 X_Calc_RT;                                         // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Stage;                                             // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Butterfly_H_Mat;                                   // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Butterfly_V_Mat;                                   // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Pingpong_1;                                        // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Pingpong_2;                                        // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Calc_Mat;                                          // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Calc_Mat_2;                                        // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RT_X_Solved;                                       // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RT_Y_Solved;                                       // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RT_Z_Solved;                                       // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     IFFT_Final;                                        // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     FFT_Normal;                                        // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FFT_Mat_Normal_DYN;                                // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Displacement__Sim_DYN;                             // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FFT_Mat_Final_DYN;                                 // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Y_Calc_Mat_DYN;                                    // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               X_Calc_Mat_DYN;                                    // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Z_Calc_Mat_DYN;                                    // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Water_Height;                                      // 0x04C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_FFT_Ocean;                                  // 0x04D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D5[0x3];                                      // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 IFFT_RT;                                           // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 IFFT_RT_B;                                         // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 IFFT_Normal;                                       // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Foam_RT;                                           // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Foam_Mat_DYN;                                      // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FFT_Normal_Texel_Size;                             // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETwo_FFT_Resolution                           FFT_Resolution;                                    // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Simulation_Scale_FFT;                              // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Speed_FFT;                                    // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Amplitude_FFT;                                // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Speed_FFT;                                    // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Height_FFT;                                   // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Choppyness_FFT;                               // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Tile_FFT;                                     // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Wind_Direction_FFT;                                // 0x0524(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         FFT_Buoyancy_Height;                               // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FFT_Buoyancy;                                      // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Use_FFT_Simulation_Delay;                          // 0x0535(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_536[0x2];                                      // 0x0536(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FFT_Simulation_Delay_Amount;                       // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FFT_Resolution_Float;                              // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ocean_is_Live_;                                    // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Water_Surface_DYN_Far;                             // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                POV_Location;                                      // 0x0550(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Shore_Waves_Texture;                               // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shore_Waves_Texture_Tile;                          // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Shore_Waves_Texture__Offset;                       // 0x056C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shore_Waves_Number;                                // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shore_Waves_Speed;                                 // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shore_Waves_Width;                                 // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shore_Waves_Hiegth;                                // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shore_Waves_Normals;                               // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMesh_Switch                                  Water_Grid_Type;                                   // 0x058C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58D[0x3];                                      // 0x058D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                POV_Forward_Vector;                                // 0x0590(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWaterline_Cameras                            Camera_Tracker;                                    // 0x059C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59D[0x3];                                      // 0x059D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    Level_Sequeqnce;                                   // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Track_Actor;                                       // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RayMinusTracing_Offset;                            // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Foam;                                          // 0x05B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B5[0x3];                                      // 0x05B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Foam_WhiteCaps_Power;                              // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Foam_Decay;                                        // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          WaterMesh_to_Use;                                  // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dynamic_Foam;                                      // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EDyn_Foam_O                                   Dynamic_Foam_Mode;                                 // 0x05C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA[0x2];                                      // 0x05CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Dyn_Foam_WhiteCap_Power;                           // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dyn_Foam_Dampening;                                // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D4[0x4];                                      // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 Dynamic_Foam_RT;                                   // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynamic_Foam_DYN;                                  // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeightedBlendables                    Dyn_Foam_CD;                                       // 0x05E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeightedBlendables                    Dyn_Foam;                                          // 0x05F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Dynamic_Ocean_Environment;                         // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)

public:
	void ExecuteUbergraph_8_FFT_H_Ocean_Sim(int32 EntryPoint);
	void Pause();
	void Live_Ocean();
	void BndEvt__Activation_Box_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Activation_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__SimCapturte_Volume_K2Node_ComponentBoundEvent_7_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__SimCapturte_Volume_K2Node_ComponentBoundEvent_6_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Buoyancy_Box_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Buoyancy_Box_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Get_Height_RT(int32 Index_0, class UTextureRenderTarget2D** HeightRT);
	void GetLastHeight(int32 CurrentHeightIndex, int32 NumFramesOld, class UTextureRenderTarget2D** HeightRT);
	void FFT_Calculator(class UTextureRenderTarget2D* Spectrum_Input, class UTextureRenderTarget2D* Final_Write);
	void POV_Tracker(struct FVector* POV_Location_0, struct FVector* POV_Forward_Vector_0);
	void GetHeightAtComponent(class UPrimitiveComponent* ActorComponent, struct FVector* Height);
	void GetHeightAtLoc(class UPrimitiveComponent* C, struct FVector* L);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"8_FFT_H_Ocean_Sim_C">();
	}
	static class AEight_FFT_H_Ocean_Sim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEight_FFT_H_Ocean_Sim_C>();
	}
};
static_assert(alignof(AEight_FFT_H_Ocean_Sim_C) == 0x000008, "Wrong alignment on AEight_FFT_H_Ocean_Sim_C");
static_assert(sizeof(AEight_FFT_H_Ocean_Sim_C) == 0x000610, "Wrong size on AEight_FFT_H_Ocean_Sim_C");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, UberGraphFrame) == 0x000220, "Member 'AEight_FFT_H_Ocean_Sim_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Water_GRID_Cine) == 0x000228, "Member 'AEight_FFT_H_Ocean_Sim_C::Water_GRID_Cine' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Water_GRID_SS) == 0x000230, "Member 'AEight_FFT_H_Ocean_Sim_C::Water_GRID_SS' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Water_GRID) == 0x000238, "Member 'AEight_FFT_H_Ocean_Sim_C::Water_GRID' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Far_Water_Plane) == 0x000240, "Member 'AEight_FFT_H_Ocean_Sim_C::Far_Water_Plane' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Billboard) == 0x000248, "Member 'AEight_FFT_H_Ocean_Sim_C::Billboard' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Activation_Box) == 0x000250, "Member 'AEight_FFT_H_Ocean_Sim_C::Activation_Box' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, SimCapturte_Volume) == 0x000258, "Member 'AEight_FFT_H_Ocean_Sim_C::SimCapturte_Volume' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Buoyancy_Volume) == 0x000260, "Member 'AEight_FFT_H_Ocean_Sim_C::Buoyancy_Volume' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, SceneCaptureComponent2D) == 0x000268, "Member 'AEight_FFT_H_Ocean_Sim_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Underwater_PostMinusProcess_Volume) == 0x000270, "Member 'AEight_FFT_H_Ocean_Sim_C::Underwater_PostMinusProcess_Volume' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, PostMinusProcess_Volume) == 0x000278, "Member 'AEight_FFT_H_Ocean_Sim_C::PostMinusProcess_Volume' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, WaterPlane) == 0x000280, "Member 'AEight_FFT_H_Ocean_Sim_C::WaterPlane' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, DefaultSceneRoot) == 0x000288, "Member 'AEight_FFT_H_Ocean_Sim_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, One_Water_Surface_Material) == 0x000290, "Member 'AEight_FFT_H_Ocean_Sim_C::One_Water_Surface_Material' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Two_Underwater_Surface_Material) == 0x000298, "Member 'AEight_FFT_H_Ocean_Sim_C::Two_Underwater_Surface_Material' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Three_Underwater_PostMinusProcess_Material) == 0x0002A0, "Member 'AEight_FFT_H_Ocean_Sim_C::Three_Underwater_PostMinusProcess_Material' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Four_Far_Water_Material) == 0x0002A8, "Member 'AEight_FFT_H_Ocean_Sim_C::Four_Far_Water_Material' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Detailed_Water_Grid_Size) == 0x0002B0, "Member 'AEight_FFT_H_Ocean_Sim_C::Detailed_Water_Grid_Size' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Distant_Water_Grid_Size) == 0x0002B4, "Member 'AEight_FFT_H_Ocean_Sim_C::Distant_Water_Grid_Size' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Wave_Height) == 0x0002B8, "Member 'AEight_FFT_H_Ocean_Sim_C::Wave_Height' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Wave_Tile) == 0x0002BC, "Member 'AEight_FFT_H_Ocean_Sim_C::Wave_Tile' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Wave_Speed) == 0x0002C0, "Member 'AEight_FFT_H_Ocean_Sim_C::Wave_Speed' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Displacement_Texture) == 0x0002C8, "Member 'AEight_FFT_H_Ocean_Sim_C::Displacement_Texture' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Water_Level) == 0x0002D0, "Member 'AEight_FFT_H_Ocean_Sim_C::Water_Level' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Screen_Offset) == 0x0002D4, "Member 'AEight_FFT_H_Ocean_Sim_C::Screen_Offset' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, PostMinusProcess_DYN) == 0x0002E0, "Member 'AEight_FFT_H_Ocean_Sim_C::PostMinusProcess_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Underwater_Surface_DYN) == 0x0002E8, "Member 'AEight_FFT_H_Ocean_Sim_C::Underwater_Surface_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Water_Surface_DYN) == 0x0002F0, "Member 'AEight_FFT_H_Ocean_Sim_C::Water_Surface_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Enable_Shallow_Water_Sim) == 0x0002F8, "Member 'AEight_FFT_H_Ocean_Sim_C::Enable_Shallow_Water_Sim' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Height0) == 0x000300, "Member 'AEight_FFT_H_Ocean_Sim_C::Height0' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Height1) == 0x000308, "Member 'AEight_FFT_H_Ocean_Sim_C::Height1' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Height2) == 0x000310, "Member 'AEight_FFT_H_Ocean_Sim_C::Height2' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, HeightfieldNormal) == 0x000318, "Member 'AEight_FFT_H_Ocean_Sim_C::HeightfieldNormal' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Compute_Displacement) == 0x000320, "Member 'AEight_FFT_H_Ocean_Sim_C::Compute_Displacement' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Sim_Capture) == 0x000328, "Member 'AEight_FFT_H_Ocean_Sim_C::Sim_Capture' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Simulation_Height) == 0x000330, "Member 'AEight_FFT_H_Ocean_Sim_C::Simulation_Height' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Simulation_Range) == 0x000334, "Member 'AEight_FFT_H_Ocean_Sim_C::Simulation_Range' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Normal_Texel_Size) == 0x000338, "Member 'AEight_FFT_H_Ocean_Sim_C::Normal_Texel_Size' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Simulation_Resolution) == 0x00033C, "Member 'AEight_FFT_H_Ocean_Sim_C::Simulation_Resolution' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Simulation_Texture_Resolution) == 0x000340, "Member 'AEight_FFT_H_Ocean_Sim_C::Simulation_Texture_Resolution' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, HeightState) == 0x000344, "Member 'AEight_FFT_H_Ocean_Sim_C::HeightState' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, TimeAccumulator) == 0x000348, "Member 'AEight_FFT_H_Ocean_Sim_C::TimeAccumulator' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Simulation_Speed) == 0x00034C, "Member 'AEight_FFT_H_Ocean_Sim_C::Simulation_Speed' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, LastTouchingActorPosition) == 0x000350, "Member 'AEight_FFT_H_Ocean_Sim_C::LastTouchingActorPosition' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Sim_Active_) == 0x00035C, "Member 'AEight_FFT_H_Ocean_Sim_C::Sim_Active_' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Capture_List_Actor) == 0x000360, "Member 'AEight_FFT_H_Ocean_Sim_C::Capture_List_Actor' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Velocity_Trigger) == 0x000370, "Member 'AEight_FFT_H_Ocean_Sim_C::Velocity_Trigger' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Gravity) == 0x000374, "Member 'AEight_FFT_H_Ocean_Sim_C::Gravity' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Water_Density) == 0x000378, "Member 'AEight_FFT_H_Ocean_Sim_C::Water_Density' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Buoyancy_Offset) == 0x00037C, "Member 'AEight_FFT_H_Ocean_Sim_C::Buoyancy_Offset' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, In_Water_Linear_Damping) == 0x000380, "Member 'AEight_FFT_H_Ocean_Sim_C::In_Water_Linear_Damping' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, In_Water_Angular_Damping) == 0x000384, "Member 'AEight_FFT_H_Ocean_Sim_C::In_Water_Angular_Damping' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Default_Linear_Damping) == 0x000388, "Member 'AEight_FFT_H_Ocean_Sim_C::Default_Linear_Damping' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Default_Angular_Damping) == 0x00038C, "Member 'AEight_FFT_H_Ocean_Sim_C::Default_Angular_Damping' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Water_Plane_Location) == 0x000390, "Member 'AEight_FFT_H_Ocean_Sim_C::Water_Plane_Location' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Primitives_List) == 0x0003A0, "Member 'AEight_FFT_H_Ocean_Sim_C::Primitives_List' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Capture_Location) == 0x0003B0, "Member 'AEight_FFT_H_Ocean_Sim_C::Capture_Location' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Screen_Space_Simulation) == 0x0003BC, "Member 'AEight_FFT_H_Ocean_Sim_C::Screen_Space_Simulation' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, SSSim_Offset) == 0x0003C0, "Member 'AEight_FFT_H_Ocean_Sim_C::SSSim_Offset' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Capture_Offset) == 0x0003C4, "Member 'AEight_FFT_H_Ocean_Sim_C::Capture_Offset' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Use_Tags_Simulation) == 0x0003C8, "Member 'AEight_FFT_H_Ocean_Sim_C::Use_Tags_Simulation' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Normal_Sim_DYN) == 0x0003D0, "Member 'AEight_FFT_H_Ocean_Sim_C::Normal_Sim_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Wave_Sim_DYN) == 0x0003D8, "Member 'AEight_FFT_H_Ocean_Sim_C::Wave_Sim_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Capture_Material) == 0x0003E0, "Member 'AEight_FFT_H_Ocean_Sim_C::Capture_Material' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Use_Tags_Buoyancy) == 0x0003E8, "Member 'AEight_FFT_H_Ocean_Sim_C::Use_Tags_Buoyancy' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Ph_k__Material) == 0x0003F0, "Member 'AEight_FFT_H_Ocean_Sim_C::Ph_k__Material' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Ph_Minusk__Material) == 0x0003F8, "Member 'AEight_FFT_H_Ocean_Sim_C::Ph_Minusk__Material' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Z_Calc_Mat) == 0x000400, "Member 'AEight_FFT_H_Ocean_Sim_C::Z_Calc_Mat' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, X_Calc_Mat) == 0x000408, "Member 'AEight_FFT_H_Ocean_Sim_C::X_Calc_Mat' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Y_Calc_Mat) == 0x000410, "Member 'AEight_FFT_H_Ocean_Sim_C::Y_Calc_Mat' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Ph_k__RT) == 0x000418, "Member 'AEight_FFT_H_Ocean_Sim_C::Ph_k__RT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Ph_Minusk__RT) == 0x000420, "Member 'AEight_FFT_H_Ocean_Sim_C::Ph_Minusk__RT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Z_Calc_RT) == 0x000428, "Member 'AEight_FFT_H_Ocean_Sim_C::Z_Calc_RT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, X_Calc_RT) == 0x000430, "Member 'AEight_FFT_H_Ocean_Sim_C::X_Calc_RT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Stage) == 0x000438, "Member 'AEight_FFT_H_Ocean_Sim_C::Stage' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Butterfly_H_Mat) == 0x000440, "Member 'AEight_FFT_H_Ocean_Sim_C::Butterfly_H_Mat' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Butterfly_V_Mat) == 0x000448, "Member 'AEight_FFT_H_Ocean_Sim_C::Butterfly_V_Mat' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Pingpong_1) == 0x000450, "Member 'AEight_FFT_H_Ocean_Sim_C::Pingpong_1' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Pingpong_2) == 0x000458, "Member 'AEight_FFT_H_Ocean_Sim_C::Pingpong_2' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Calc_Mat) == 0x000460, "Member 'AEight_FFT_H_Ocean_Sim_C::Calc_Mat' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Calc_Mat_2) == 0x000468, "Member 'AEight_FFT_H_Ocean_Sim_C::Calc_Mat_2' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, RT_X_Solved) == 0x000470, "Member 'AEight_FFT_H_Ocean_Sim_C::RT_X_Solved' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, RT_Y_Solved) == 0x000478, "Member 'AEight_FFT_H_Ocean_Sim_C::RT_Y_Solved' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, RT_Z_Solved) == 0x000480, "Member 'AEight_FFT_H_Ocean_Sim_C::RT_Z_Solved' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, IFFT_Final) == 0x000488, "Member 'AEight_FFT_H_Ocean_Sim_C::IFFT_Final' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, FFT_Normal) == 0x000490, "Member 'AEight_FFT_H_Ocean_Sim_C::FFT_Normal' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, FFT_Mat_Normal_DYN) == 0x000498, "Member 'AEight_FFT_H_Ocean_Sim_C::FFT_Mat_Normal_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Displacement__Sim_DYN) == 0x0004A0, "Member 'AEight_FFT_H_Ocean_Sim_C::Displacement__Sim_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, FFT_Mat_Final_DYN) == 0x0004A8, "Member 'AEight_FFT_H_Ocean_Sim_C::FFT_Mat_Final_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Y_Calc_Mat_DYN) == 0x0004B0, "Member 'AEight_FFT_H_Ocean_Sim_C::Y_Calc_Mat_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, X_Calc_Mat_DYN) == 0x0004B8, "Member 'AEight_FFT_H_Ocean_Sim_C::X_Calc_Mat_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Z_Calc_Mat_DYN) == 0x0004C0, "Member 'AEight_FFT_H_Ocean_Sim_C::Z_Calc_Mat_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Water_Height) == 0x0004C8, "Member 'AEight_FFT_H_Ocean_Sim_C::Water_Height' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Enable_FFT_Ocean) == 0x0004D4, "Member 'AEight_FFT_H_Ocean_Sim_C::Enable_FFT_Ocean' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, IFFT_RT) == 0x0004D8, "Member 'AEight_FFT_H_Ocean_Sim_C::IFFT_RT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, IFFT_RT_B) == 0x0004E0, "Member 'AEight_FFT_H_Ocean_Sim_C::IFFT_RT_B' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, IFFT_Normal) == 0x0004E8, "Member 'AEight_FFT_H_Ocean_Sim_C::IFFT_Normal' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Foam_RT) == 0x0004F0, "Member 'AEight_FFT_H_Ocean_Sim_C::Foam_RT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Foam_Mat_DYN) == 0x0004F8, "Member 'AEight_FFT_H_Ocean_Sim_C::Foam_Mat_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, FFT_Normal_Texel_Size) == 0x000500, "Member 'AEight_FFT_H_Ocean_Sim_C::FFT_Normal_Texel_Size' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, FFT_Resolution) == 0x000504, "Member 'AEight_FFT_H_Ocean_Sim_C::FFT_Resolution' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Simulation_Scale_FFT) == 0x000508, "Member 'AEight_FFT_H_Ocean_Sim_C::Simulation_Scale_FFT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Wind_Speed_FFT) == 0x00050C, "Member 'AEight_FFT_H_Ocean_Sim_C::Wind_Speed_FFT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Wave_Amplitude_FFT) == 0x000510, "Member 'AEight_FFT_H_Ocean_Sim_C::Wave_Amplitude_FFT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Wave_Speed_FFT) == 0x000514, "Member 'AEight_FFT_H_Ocean_Sim_C::Wave_Speed_FFT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Wave_Height_FFT) == 0x000518, "Member 'AEight_FFT_H_Ocean_Sim_C::Wave_Height_FFT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Wave_Choppyness_FFT) == 0x00051C, "Member 'AEight_FFT_H_Ocean_Sim_C::Wave_Choppyness_FFT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Wave_Tile_FFT) == 0x000520, "Member 'AEight_FFT_H_Ocean_Sim_C::Wave_Tile_FFT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Wind_Direction_FFT) == 0x000524, "Member 'AEight_FFT_H_Ocean_Sim_C::Wind_Direction_FFT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, FFT_Buoyancy_Height) == 0x000530, "Member 'AEight_FFT_H_Ocean_Sim_C::FFT_Buoyancy_Height' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, FFT_Buoyancy) == 0x000534, "Member 'AEight_FFT_H_Ocean_Sim_C::FFT_Buoyancy' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Use_FFT_Simulation_Delay) == 0x000535, "Member 'AEight_FFT_H_Ocean_Sim_C::Use_FFT_Simulation_Delay' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, FFT_Simulation_Delay_Amount) == 0x000538, "Member 'AEight_FFT_H_Ocean_Sim_C::FFT_Simulation_Delay_Amount' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, FFT_Resolution_Float) == 0x00053C, "Member 'AEight_FFT_H_Ocean_Sim_C::FFT_Resolution_Float' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Ocean_is_Live_) == 0x000540, "Member 'AEight_FFT_H_Ocean_Sim_C::Ocean_is_Live_' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Water_Surface_DYN_Far) == 0x000548, "Member 'AEight_FFT_H_Ocean_Sim_C::Water_Surface_DYN_Far' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, POV_Location) == 0x000550, "Member 'AEight_FFT_H_Ocean_Sim_C::POV_Location' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Shore_Waves_Texture) == 0x000560, "Member 'AEight_FFT_H_Ocean_Sim_C::Shore_Waves_Texture' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Shore_Waves_Texture_Tile) == 0x000568, "Member 'AEight_FFT_H_Ocean_Sim_C::Shore_Waves_Texture_Tile' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Shore_Waves_Texture__Offset) == 0x00056C, "Member 'AEight_FFT_H_Ocean_Sim_C::Shore_Waves_Texture__Offset' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Shore_Waves_Number) == 0x000578, "Member 'AEight_FFT_H_Ocean_Sim_C::Shore_Waves_Number' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Shore_Waves_Speed) == 0x00057C, "Member 'AEight_FFT_H_Ocean_Sim_C::Shore_Waves_Speed' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Shore_Waves_Width) == 0x000580, "Member 'AEight_FFT_H_Ocean_Sim_C::Shore_Waves_Width' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Shore_Waves_Hiegth) == 0x000584, "Member 'AEight_FFT_H_Ocean_Sim_C::Shore_Waves_Hiegth' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Shore_Waves_Normals) == 0x000588, "Member 'AEight_FFT_H_Ocean_Sim_C::Shore_Waves_Normals' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Water_Grid_Type) == 0x00058C, "Member 'AEight_FFT_H_Ocean_Sim_C::Water_Grid_Type' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, POV_Forward_Vector) == 0x000590, "Member 'AEight_FFT_H_Ocean_Sim_C::POV_Forward_Vector' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Camera_Tracker) == 0x00059C, "Member 'AEight_FFT_H_Ocean_Sim_C::Camera_Tracker' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Level_Sequeqnce) == 0x0005A0, "Member 'AEight_FFT_H_Ocean_Sim_C::Level_Sequeqnce' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Track_Actor) == 0x0005A8, "Member 'AEight_FFT_H_Ocean_Sim_C::Track_Actor' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, RayMinusTracing_Offset) == 0x0005B0, "Member 'AEight_FFT_H_Ocean_Sim_C::RayMinusTracing_Offset' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Use_Foam) == 0x0005B4, "Member 'AEight_FFT_H_Ocean_Sim_C::Use_Foam' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Foam_WhiteCaps_Power) == 0x0005B8, "Member 'AEight_FFT_H_Ocean_Sim_C::Foam_WhiteCaps_Power' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Foam_Decay) == 0x0005BC, "Member 'AEight_FFT_H_Ocean_Sim_C::Foam_Decay' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, WaterMesh_to_Use) == 0x0005C0, "Member 'AEight_FFT_H_Ocean_Sim_C::WaterMesh_to_Use' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Dynamic_Foam) == 0x0005C8, "Member 'AEight_FFT_H_Ocean_Sim_C::Dynamic_Foam' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Dynamic_Foam_Mode) == 0x0005C9, "Member 'AEight_FFT_H_Ocean_Sim_C::Dynamic_Foam_Mode' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Dyn_Foam_WhiteCap_Power) == 0x0005CC, "Member 'AEight_FFT_H_Ocean_Sim_C::Dyn_Foam_WhiteCap_Power' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Dyn_Foam_Dampening) == 0x0005D0, "Member 'AEight_FFT_H_Ocean_Sim_C::Dyn_Foam_Dampening' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Dynamic_Foam_RT) == 0x0005D8, "Member 'AEight_FFT_H_Ocean_Sim_C::Dynamic_Foam_RT' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Dynamic_Foam_DYN) == 0x0005E0, "Member 'AEight_FFT_H_Ocean_Sim_C::Dynamic_Foam_DYN' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Dyn_Foam_CD) == 0x0005E8, "Member 'AEight_FFT_H_Ocean_Sim_C::Dyn_Foam_CD' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Dyn_Foam) == 0x0005F8, "Member 'AEight_FFT_H_Ocean_Sim_C::Dyn_Foam' has a wrong offset!");
static_assert(offsetof(AEight_FFT_H_Ocean_Sim_C, Dynamic_Ocean_Environment) == 0x000608, "Member 'AEight_FFT_H_Ocean_Sim_C::Dynamic_Ocean_Environment' has a wrong offset!");

}

