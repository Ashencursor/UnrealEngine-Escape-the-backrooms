#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VRCharacter_Demo_Client

#include "Basic.hpp"

#include "VRCharacter_Demo_Client_classes.hpp"
#include "VRCharacter_Demo_Client_parameters.hpp"


namespace SDK
{

// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ExecuteUbergraph_VRCharacter_Demo_Client
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::ExecuteUbergraph_VRCharacter_Demo_Client(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "ExecuteUbergraph_VRCharacter_Demo_Client");

	Params::VRCharacter_Demo_Client_C_ExecuteUbergraph_VRCharacter_Demo_Client Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.UpdateGrips
// (BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::UpdateGrips()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "UpdateGrips");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.OpenSettings
// (BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::OpenSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "OpenSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.UpdateGesture
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRightHand                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             Gesture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::UpdateGesture(bool IsRightHand, class FName Gesture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "UpdateGesture");

	Params::VRCharacter_Demo_Client_C_UpdateGesture Parms{};

	Parms.IsRightHand = IsRightHand;
	Parms.Gesture = Gesture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0");

	Params::VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_X_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1");

	Params::VRCharacter_Demo_Client_C_InpAxisEvt_VRMove_Y_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2");

	Params::VRCharacter_Demo_Client_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Alter Finger Curl State MC
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Left_hand__                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVRCharacter_Demo_Client_C::Alter_Finger_Curl_State_MC(bool Left_hand__, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "Alter Finger Curl State MC");

	Params::VRCharacter_Demo_Client_C_Alter_Finger_Curl_State_MC Parms{};

	Parms.Left_hand__ = Left_hand__;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Alter Finger Curl State
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Left_hand__                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVRCharacter_Demo_Client_C::Alter_Finger_Curl_State(bool Left_hand__, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "Alter Finger Curl State");

	Params::VRCharacter_Demo_Client_C_Alter_Finger_Curl_State Parms{};

	Parms.Left_hand__ = Left_hand__;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.StartInteracting
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVRCharacter_Demo_Client_C::StartInteracting(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "StartInteracting");

	Params::VRCharacter_Demo_Client_C_StartInteracting Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3");

	Params::VRCharacter_Demo_Client_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_3 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4");

	Params::VRCharacter_Demo_Client_C_InpAxisEvt_VRTurn_X_K2Node_InputAxisEvent_4 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ShowRightArm
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::ShowRightArm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "ShowRightArm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ShowLeftArm
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::ShowLeftArm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "ShowLeftArm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Secondary_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpActEvt_Secondary_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpActEvt_Secondary_K2Node_InputActionEvent_0");

	Params::VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Secondary_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpActEvt_Secondary_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpActEvt_Secondary_K2Node_InputActionEvent_1");

	Params::VRCharacter_Demo_Client_C_InpActEvt_Secondary_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_ResetVR_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpActEvt_ResetVR_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpActEvt_ResetVR_K2Node_InputActionEvent_2");

	Params::VRCharacter_Demo_Client_C_InpActEvt_ResetVR_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Sprint_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpActEvt_Sprint_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpActEvt_Sprint_K2Node_InputActionEvent_3");

	Params::VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Sprint_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpActEvt_Sprint_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpActEvt_Sprint_K2Node_InputActionEvent_4");

	Params::VRCharacter_Demo_Client_C_InpActEvt_Sprint_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Inventory_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpActEvt_Inventory_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpActEvt_Inventory_K2Node_InputActionEvent_5");

	Params::VRCharacter_Demo_Client_C_InpActEvt_Inventory_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Interact_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpActEvt_Interact_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpActEvt_Interact_K2Node_InputActionEvent_6");

	Params::VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Interact_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpActEvt_Interact_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpActEvt_Interact_K2Node_InputActionEvent_7");

	Params::VRCharacter_Demo_Client_C_InpActEvt_Interact_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Use_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpActEvt_Use_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpActEvt_Use_K2Node_InputActionEvent_8");

	Params::VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpActEvt_Use_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpActEvt_Use_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpActEvt_Use_K2Node_InputActionEvent_9");

	Params::VRCharacter_Demo_Client_C_InpActEvt_Use_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Timeline_3_0__UpdateFunc
// (BlueprintEvent)

void AVRCharacter_Demo_Client_C::Timeline_3_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "Timeline_3_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Timeline_3_0__FinishedFunc
// (BlueprintEvent)

void AVRCharacter_Demo_Client_C::Timeline_3_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "Timeline_3_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.TickHeadsetLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::TickHeadsetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "TickHeadsetLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.SetupWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DesiredSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::SetupWidget(bool DesiredSize, float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "SetupWidget");

	Params::VRCharacter_Demo_Client_C_SetupWidget Parms{};

	Parms.DesiredSize = DesiredSize;
	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ToggleWidgetInteraction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVRCharacter_Demo_Client_C::ToggleWidgetInteraction(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "ToggleWidgetInteraction");

	Params::VRCharacter_Demo_Client_C_ToggleWidgetInteraction Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.UpdatePlayerCamera
// (Public, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::UpdatePlayerCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "UpdatePlayerCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Update Beam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::Update_Beam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "Update Beam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.TickGesture
// (Public, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::TickGesture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "TickGesture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.RemoveVHS
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::RemoveVHS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "RemoveVHS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.OnBalance
// (BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::OnBalance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "OnBalance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.StopBalance
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::StopBalance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "StopBalance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.StartBalance
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    First                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVRCharacter_Demo_Client_C::StartBalance(bool Direction, bool First)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "StartBalance");

	Params::VRCharacter_Demo_Client_C_StartBalance Parms{};

	Parms.Direction = Direction;
	Parms.First = First;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.K2_OnEndCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "K2_OnEndCrouch");

	Params::VRCharacter_Demo_Client_C_K2_OnEndCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.K2_OnStartCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "K2_OnStartCrouch");

	Params::VRCharacter_Demo_Client_C_K2_OnStartCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ShowInteractText
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AVRCharacter_Demo_Client_C::ShowInteractText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "ShowInteractText");

	Params::VRCharacter_Demo_Client_C_ShowInteractText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ChangeCrosshairVisibility
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVRCharacter_Demo_Client_C::ChangeCrosshairVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "ChangeCrosshairVisibility");

	Params::VRCharacter_Demo_Client_C_ChangeCrosshairVisibility Parms{};

	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.CreateLegs
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::CreateLegs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "CreateLegs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_157
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpAxisEvt_Turn_K2Node_InputAxisEvent_157");

	Params::VRCharacter_Demo_Client_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_172
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "InpAxisEvt_LookUp_K2Node_InputAxisEvent_172");

	Params::VRCharacter_Demo_Client_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AVRCharacter_Demo_Client_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.OnPossess
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::OnPossess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "OnPossess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.KillClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::KillClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "KillClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.AddHeat
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::AddHeat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "AddHeat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.StopFear
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::StopFear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "StopFear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Fear
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHE_Fear                         Param_Fear_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::Fear(const struct FHE_Fear& Param_Fear_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "Fear");

	Params::VRCharacter_Demo_Client_C_Fear Parms{};

	Parms.Param_Fear_0 = std::move(Param_Fear_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.UpdateFOV
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::UpdateFOV()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "UpdateFOV");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.HideLeftArm
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVRCharacter_Demo_Client_C::HideLeftArm(bool Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "HideLeftArm");

	Params::VRCharacter_Demo_Client_C_HideLeftArm Parms{};

	Parms.Hide = Hide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.HideRightArm
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVRCharacter_Demo_Client_C::HideRightArm(bool Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "HideRightArm");

	Params::VRCharacter_Demo_Client_C_HideRightArm Parms{};

	Parms.Hide = Hide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.TryPickup
// (Event, Public, BlueprintEvent)

void AVRCharacter_Demo_Client_C::TryPickup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "TryPickup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "ReceiveTick");

	Params::VRCharacter_Demo_Client_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.SpawnEquipItem_SERVER
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::SpawnEquipItem_SERVER(class UClass* ItemClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "SpawnEquipItem_SERVER");

	Params::VRCharacter_Demo_Client_C_SpawnEquipItem_SERVER Parms{};

	Parms.ItemClass = ItemClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.SetPostProcessing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Chromatic_Distance                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Tracking_Noise_Level                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Signal_Distortion_Intensity                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Color_Tornado_Intensity                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Warp_Belt_Intensity                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Screen_Hop_Frequency                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Random_Horizontal_Offset_Frequency                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Screen_Hop_Intensity                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Random_Horizontal_Offset_Strength                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::SetPostProcessing(float Chromatic_Distance, float Tracking_Noise_Level, float Signal_Distortion_Intensity, float Color_Tornado_Intensity, float Warp_Belt_Intensity, float Screen_Hop_Frequency, float Random_Horizontal_Offset_Frequency, float Screen_Hop_Intensity, float Random_Horizontal_Offset_Strength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "SetPostProcessing");

	Params::VRCharacter_Demo_Client_C_SetPostProcessing Parms{};

	Parms.Chromatic_Distance = Chromatic_Distance;
	Parms.Tracking_Noise_Level = Tracking_Noise_Level;
	Parms.Signal_Distortion_Intensity = Signal_Distortion_Intensity;
	Parms.Color_Tornado_Intensity = Color_Tornado_Intensity;
	Parms.Warp_Belt_Intensity = Warp_Belt_Intensity;
	Parms.Screen_Hop_Frequency = Screen_Hop_Frequency;
	Parms.Random_Horizontal_Offset_Frequency = Random_Horizontal_Offset_Frequency;
	Parms.Screen_Hop_Intensity = Screen_Hop_Intensity;
	Parms.Random_Horizontal_Offset_Strength = Random_Horizontal_Offset_Strength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Toggle Post Processing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Activated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVRCharacter_Demo_Client_C::Toggle_Post_Processing(bool Activated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "Toggle Post Processing");

	Params::VRCharacter_Demo_Client_C_Toggle_Post_Processing Parms{};

	Parms.Activated = Activated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.CheckStamina
// (Public, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::CheckStamina()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "CheckStamina");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.Headshake
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFootstepActionsEnum                    FootstepType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVRCharacter_Demo_Client_C::Headshake(EFootstepActionsEnum FootstepType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "Headshake");

	Params::VRCharacter_Demo_Client_C_Headshake Parms{};

	Parms.FootstepType = FootstepType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ToggleVHS
// (Public, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::ToggleVHS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "ToggleVHS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.ToggleCrosshair
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVRCharacter_Demo_Client_C::ToggleCrosshair(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "ToggleCrosshair");

	Params::VRCharacter_Demo_Client_C_ToggleCrosshair Parms{};

	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VRCharacter_Demo_Client.VRCharacter_Demo_Client_C.CheckFlashlight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVRCharacter_Demo_Client_C::CheckFlashlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRCharacter_Demo_Client_C", "CheckFlashlight");

	UObject::ProcessEvent(Func, nullptr);
}

}

