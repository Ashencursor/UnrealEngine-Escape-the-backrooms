#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Bacteria_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Bacteria_BP.Bacteria_BP_C
// 0x0060 (0x0520 - 0x04C0)
class ABacteria_BP_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       KillPlayer;                                        // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldMove;                                        // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentSpeedLevel;                                 // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanTeleport;                                       // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E1[0x3];                                      // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinutesElapsed;                                    // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          Behavior_Tree;                                     // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAttack;                                         // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldReset;                                       // 0x04F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F2[0x2];                                      // 0x04F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartingLocation;                                  // 0x04F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ShakeTimer;                                        // 0x0500(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSoundTime;                                  // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ShakeTimes;                                        // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_Bacteria_BP(int32 EntryPoint);
	void OnStateChanged(EAudioComponentPlayState PlayState);
	void SetupWorldShakes();
	void MC_KillAnimation();
	void MC_KillSound();
	void AttackPlayer(class ABPCharacter_Demo_C* Player);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void FaceClosestPlayer();
	void StopSound();
	void StartSound();
	void ReceiveBeginPlay();
	void CalcLookAtRotation(class AActor* MyActor, class AActor* Target);
	void SetNewSpeed(int32 Count, float* NewSpeed);
	void UpdateSpeed();
	void UpdateTeleport();
	void GetClosestPlayer(class ABPCharacter_Demo_C** Closest);
	void LookAtEntity(class ABPCharacter_Demo_C* Target);
	void StopMovement();
	void ResetPosition();
	void CheckShakeTime();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Bacteria_BP_C">();
	}
	static class ABacteria_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABacteria_BP_C>();
	}
};
static_assert(alignof(ABacteria_BP_C) == 0x000010, "Wrong alignment on ABacteria_BP_C");
static_assert(sizeof(ABacteria_BP_C) == 0x000520, "Wrong size on ABacteria_BP_C");
static_assert(offsetof(ABacteria_BP_C, UberGraphFrame) == 0x0004C0, "Member 'ABacteria_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, KillPlayer) == 0x0004C8, "Member 'ABacteria_BP_C::KillPlayer' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, Audio) == 0x0004D0, "Member 'ABacteria_BP_C::Audio' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, ShouldMove) == 0x0004D8, "Member 'ABacteria_BP_C::ShouldMove' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, CurrentSpeedLevel) == 0x0004DC, "Member 'ABacteria_BP_C::CurrentSpeedLevel' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, CanTeleport) == 0x0004E0, "Member 'ABacteria_BP_C::CanTeleport' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, MinutesElapsed) == 0x0004E4, "Member 'ABacteria_BP_C::MinutesElapsed' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, Behavior_Tree) == 0x0004E8, "Member 'ABacteria_BP_C::Behavior_Tree' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, CanAttack) == 0x0004F0, "Member 'ABacteria_BP_C::CanAttack' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, ShouldReset) == 0x0004F1, "Member 'ABacteria_BP_C::ShouldReset' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, StartingLocation) == 0x0004F4, "Member 'ABacteria_BP_C::StartingLocation' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, ShakeTimer) == 0x000500, "Member 'ABacteria_BP_C::ShakeTimer' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, CurrentSoundTime) == 0x000508, "Member 'ABacteria_BP_C::CurrentSoundTime' has a wrong offset!");
static_assert(offsetof(ABacteria_BP_C, ShakeTimes) == 0x000510, "Member 'ABacteria_BP_C::ShakeTimes' has a wrong offset!");

}

