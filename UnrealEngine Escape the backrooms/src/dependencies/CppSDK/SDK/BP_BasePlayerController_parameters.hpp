#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BasePlayerController

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_BasePlayerController.BP_BasePlayerController_C.ExecuteUbergraph_BP_BasePlayerController
// 0x0028 (0x0028 - 0x0000)
struct BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_AchievementName;                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MyGameInstance_C*                   K2Node_DynamicCast_AsBP_My_Game_Instance;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController) == 0x000008, "Wrong alignment on BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController");
static_assert(sizeof(BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController) == 0x000028, "Wrong size on BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController");
static_assert(offsetof(BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController, EntryPoint) == 0x000000, "Member 'BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController, K2Node_CustomEvent_AchievementName) == 0x000004, "Member 'BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController::K2Node_CustomEvent_AchievementName' has a wrong offset!");
static_assert(offsetof(BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController, K2Node_DynamicCast_AsBP_My_Game_Instance) == 0x000018, "Member 'BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController::K2Node_DynamicCast_AsBP_My_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_BasePlayerController.BP_BasePlayerController_C.UnlockAchievement
// 0x0008 (0x0008 - 0x0000)
struct BP_BasePlayerController_C_UnlockAchievement final
{
public:
	class FName                                   AchievementName;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BasePlayerController_C_UnlockAchievement) == 0x000004, "Wrong alignment on BP_BasePlayerController_C_UnlockAchievement");
static_assert(sizeof(BP_BasePlayerController_C_UnlockAchievement) == 0x000008, "Wrong size on BP_BasePlayerController_C_UnlockAchievement");
static_assert(offsetof(BP_BasePlayerController_C_UnlockAchievement, AchievementName) == 0x000000, "Member 'BP_BasePlayerController_C_UnlockAchievement::AchievementName' has a wrong offset!");

}

