#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VRPlayer_AnimBP

#include "Basic.hpp"

#include "HorrorEngineSettings_structs.hpp"
#include "DragonIKPlugin_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FootstepActionsEnum_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass VRPlayer_AnimBP.VRPlayer_AnimBP_C
// 0x2E70 (0x3130 - 0x02C0)
class UVRPlayer_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x02F8(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x0318(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0340(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0388(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_22;                 // 0x03B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_21;                 // 0x03D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_20;                 // 0x0400(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_19;                 // 0x0428(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_18;                 // 0x0450(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_17;                 // 0x0478(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_16;                 // 0x04A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_15;                 // 0x04C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x04F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x0518(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x0540(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x0568(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x0590(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x05B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x05E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0608(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0630(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0658(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0680(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x06A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x06D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x06F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0720(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_4;                  // 0x0748(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_10;                      // 0x0830(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_3;                  // 0x0860(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x0948(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x0978(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x0A60(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x0A90(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x0B10(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0B40(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0BC0(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0BF0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0C70(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x0CA0(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0D88(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0DB8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0E38(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0E68(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0EE8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0F18(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0F98(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0FC8(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x10B0(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x10E0(0x00B0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_3;                    // 0x1190(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x12E8(0x0028)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x1310(0x0020)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x1330(0x0158)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x1488(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x14A8(0x0020)()
	uint8                                         Pad_14C8[0x8];                                     // 0x14C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_DragonAimSolver              AnimGraphNode_DragonAimSolver_1;                   // 0x14D0(0x09D0)()
	struct FAnimNode_DragonAimSolver              AnimGraphNode_DragonAimSolver;                     // 0x1EA0(0x09D0)()
	struct FAnimNode_ApplyLimits                  AnimGraphNode_ApplyLimits_1;                       // 0x2870(0x00E8)()
	struct FAnimNode_ApplyLimits                  AnimGraphNode_ApplyLimits;                         // 0x2958(0x00E8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x2A40(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x2B98(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x2BC0(0x00A0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x2C60(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x2DB8(0x0028)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x2DE0(0x0108)()
	class UGripMotionControllerComponent*         LeftController;                                    // 0x2EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGripMotionControllerComponent*         RightController;                                   // 0x2EF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRotator>                       Index_r;                                           // 0x2EF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRotator>                       Middle_r;                                          // 0x2F08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRotator>                       Pinky_r;                                           // 0x2F18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRotator>                       Ring_r;                                            // 0x2F28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRotator>                       Thumb_r;                                           // 0x2F38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRotator>                       Index_l;                                           // 0x2F48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRotator>                       Middle_l;                                          // 0x2F58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRotator>                       Pinky_l;                                           // 0x2F68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRotator>                       Ring_l;                                            // 0x2F78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRotator>                       Thumb_l;                                           // 0x2F88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDragonData_Overrided_Location_Data    LeftArmData;                                       // 0x2F98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDragonData_Overrided_Location_Data    RightArmData;                                      // 0x2FA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_2FB8[0x8];                                     // 0x2FB8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Look_Target_Transform;                             // 0x2FC0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AVRCharacter_Demo_C*                    VRCharacter;                                       // 0x2FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHoldingItem;                                     // 0x2FF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HoldingFlashlight;                                 // 0x2FF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUsingItem;                                       // 0x2FFA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsClimbing;                                        // 0x2FFB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FFC[0x4];                                     // 0x2FFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Idle;                                              // 0x3000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3008[0x8];                                     // 0x3008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LeftHandTransform;                                 // 0x3010(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             RightHandTransform;                                // 0x3040(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Pitch;                                             // 0x3070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x3074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Direction;                                         // 0x3078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Crouching;                                         // 0x307C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableJump;                                        // 0x307D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Jumping;                                           // 0x307E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_307F[0x1];                                     // 0x307F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHorrorEngineSettings                  GameSettings;                                      // 0x3080(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flashlight;                                        // 0x3120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLocal;                                           // 0x3121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_VRPlayer_AnimBP(int32 EntryPoint);
	void AnimNotify_Footstep();
	void Set_Head_Look_Data();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_VRPlayer_AnimBP_AnimGraphNode_TransitionResult_3E1691674F65720C892701A188A702A7();
	void Update_Hand_Transforms();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_VRPlayer_AnimBP_AnimGraphNode_TransitionResult_CA0203C841D2E39A9711BFB8A1E12C19();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_VRPlayer_AnimBP_AnimGraphNode_TransitionResult_32B757A3437EF1143D5D26AEDE8F1038();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_VRPlayer_AnimBP_AnimGraphNode_TransitionResult_DA0D655B46ADA53F5C82A68049D56149();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_VRPlayer_AnimBP_AnimGraphNode_TransitionResult_C8D6D5A44587F56E9CD526A6E33878ED();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_VRPlayer_AnimBP_AnimGraphNode_TransitionResult_41B54CFE47D2296FB238B9A29E986ED9();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_VRPlayer_AnimBP_AnimGraphNode_TransitionResult_4A658B94413800B70F9BBC90571890F9();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_VRPlayer_AnimBP_AnimGraphNode_TransitionResult_6FCB0D8548D3AB75582BF0975FA25318();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_VRPlayer_AnimBP_AnimGraphNode_BlendListByBool_5B317DAD492ACB7B9F98799294FE0CE5();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_VRPlayer_AnimBP_AnimGraphNode_ModifyBone_76B69A484AC40A9FC96ECDADC5DAC7BC();
	void Footstep(EFootstepActionsEnum FootstepType);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"VRPlayer_AnimBP_C">();
	}
	static class UVRPlayer_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVRPlayer_AnimBP_C>();
	}
};
static_assert(alignof(UVRPlayer_AnimBP_C) == 0x000010, "Wrong alignment on UVRPlayer_AnimBP_C");
static_assert(sizeof(UVRPlayer_AnimBP_C) == 0x003130, "Wrong size on UVRPlayer_AnimBP_C");
static_assert(offsetof(UVRPlayer_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UVRPlayer_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_LocalToComponentSpace_1) == 0x0002F8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_UseCachedPose_4) == 0x000318, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_Slot) == 0x000340, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_UseCachedPose_3) == 0x000388, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_22) == 0x0003B0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_22' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_21) == 0x0003D8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_21' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_20) == 0x000400, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_20' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_19) == 0x000428, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_19' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_18) == 0x000450, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_18' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_17) == 0x000478, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_17' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_16) == 0x0004A0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_16' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_15) == 0x0004C8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_15' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_14) == 0x0004F0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_13) == 0x000518, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_12) == 0x000540, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_11) == 0x000568, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_10) == 0x000590, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_9) == 0x0005B8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_8) == 0x0005E0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_7) == 0x000608, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_6) == 0x000630, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_5) == 0x000658, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_4) == 0x000680, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_3) == 0x0006A8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_2) == 0x0006D0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult_1) == 0x0006F8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_TransitionResult) == 0x000720, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_BlendSpacePlayer_4) == 0x000748, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_BlendSpacePlayer_4' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateResult_10) == 0x000830, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateResult_10' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_BlendSpacePlayer_3) == 0x000860, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_BlendSpacePlayer_3' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateResult_9) == 0x000948, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_BlendSpacePlayer_2) == 0x000978, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateResult_8) == 0x000A60, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_SequencePlayer_5) == 0x000A90, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateResult_7) == 0x000B10, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_SequencePlayer_4) == 0x000B40, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateResult_6) == 0x000BC0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x000BF0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateResult_5) == 0x000C70, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_BlendSpacePlayer_1) == 0x000CA0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateResult_4) == 0x000D88, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x000DB8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateResult_3) == 0x000E38, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x000E68, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateResult_2) == 0x000EE8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x000F18, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateResult_1) == 0x000F98, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x000FC8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateResult) == 0x0010B0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_StateMachine) == 0x0010E0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_SaveCachedPose_3) == 0x001190, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_SaveCachedPose_3' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_UseCachedPose_2) == 0x0012E8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x001310, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_SaveCachedPose_2) == 0x001330, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x001488, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x0014A8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_DragonAimSolver_1) == 0x0014D0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_DragonAimSolver_1' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_DragonAimSolver) == 0x001EA0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_DragonAimSolver' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_ApplyLimits_1) == 0x002870, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_ApplyLimits_1' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_ApplyLimits) == 0x002958, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_ApplyLimits' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_SaveCachedPose_1) == 0x002A40, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_UseCachedPose_1) == 0x002B98, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_BlendListByBool) == 0x002BC0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_SaveCachedPose) == 0x002C60, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_UseCachedPose) == 0x002DB8, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, AnimGraphNode_ModifyBone) == 0x002DE0, "Member 'UVRPlayer_AnimBP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, LeftController) == 0x002EE8, "Member 'UVRPlayer_AnimBP_C::LeftController' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, RightController) == 0x002EF0, "Member 'UVRPlayer_AnimBP_C::RightController' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Index_r) == 0x002EF8, "Member 'UVRPlayer_AnimBP_C::Index_r' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Middle_r) == 0x002F08, "Member 'UVRPlayer_AnimBP_C::Middle_r' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Pinky_r) == 0x002F18, "Member 'UVRPlayer_AnimBP_C::Pinky_r' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Ring_r) == 0x002F28, "Member 'UVRPlayer_AnimBP_C::Ring_r' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Thumb_r) == 0x002F38, "Member 'UVRPlayer_AnimBP_C::Thumb_r' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Index_l) == 0x002F48, "Member 'UVRPlayer_AnimBP_C::Index_l' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Middle_l) == 0x002F58, "Member 'UVRPlayer_AnimBP_C::Middle_l' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Pinky_l) == 0x002F68, "Member 'UVRPlayer_AnimBP_C::Pinky_l' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Ring_l) == 0x002F78, "Member 'UVRPlayer_AnimBP_C::Ring_l' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Thumb_l) == 0x002F88, "Member 'UVRPlayer_AnimBP_C::Thumb_l' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, LeftArmData) == 0x002F98, "Member 'UVRPlayer_AnimBP_C::LeftArmData' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, RightArmData) == 0x002FA8, "Member 'UVRPlayer_AnimBP_C::RightArmData' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Look_Target_Transform) == 0x002FC0, "Member 'UVRPlayer_AnimBP_C::Look_Target_Transform' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, VRCharacter) == 0x002FF0, "Member 'UVRPlayer_AnimBP_C::VRCharacter' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, IsHoldingItem) == 0x002FF8, "Member 'UVRPlayer_AnimBP_C::IsHoldingItem' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, HoldingFlashlight) == 0x002FF9, "Member 'UVRPlayer_AnimBP_C::HoldingFlashlight' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, IsUsingItem) == 0x002FFA, "Member 'UVRPlayer_AnimBP_C::IsUsingItem' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, IsClimbing) == 0x002FFB, "Member 'UVRPlayer_AnimBP_C::IsClimbing' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Idle) == 0x003000, "Member 'UVRPlayer_AnimBP_C::Idle' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, LeftHandTransform) == 0x003010, "Member 'UVRPlayer_AnimBP_C::LeftHandTransform' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, RightHandTransform) == 0x003040, "Member 'UVRPlayer_AnimBP_C::RightHandTransform' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Pitch) == 0x003070, "Member 'UVRPlayer_AnimBP_C::Pitch' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Speed) == 0x003074, "Member 'UVRPlayer_AnimBP_C::Speed' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Direction) == 0x003078, "Member 'UVRPlayer_AnimBP_C::Direction' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Crouching) == 0x00307C, "Member 'UVRPlayer_AnimBP_C::Crouching' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, EnableJump) == 0x00307D, "Member 'UVRPlayer_AnimBP_C::EnableJump' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Jumping) == 0x00307E, "Member 'UVRPlayer_AnimBP_C::Jumping' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, GameSettings) == 0x003080, "Member 'UVRPlayer_AnimBP_C::GameSettings' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, Flashlight) == 0x003120, "Member 'UVRPlayer_AnimBP_C::Flashlight' has a wrong offset!");
static_assert(offsetof(UVRPlayer_AnimBP_C, IsLocal) == 0x003121, "Member 'UVRPlayer_AnimBP_C::IsLocal' has a wrong offset!");

}

