#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InteractiveGrassManager_BP

#include "Basic.hpp"

#include "InteractiveGrassManager_BP_classes.hpp"
#include "InteractiveGrassManager_BP_parameters.hpp"


namespace SDK
{

// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.ExecuteUbergraph_InteractiveGrassManager_BP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AInteractiveGrassManager_BP_C::ExecuteUbergraph_InteractiveGrassManager_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "ExecuteUbergraph_InteractiveGrassManager_BP");

	Params::InteractiveGrassManager_BP_C_ExecuteUbergraph_InteractiveGrassManager_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.SmoothlyChangeWindStrength
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewStrength                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AInteractiveGrassManager_BP_C::SmoothlyChangeWindStrength(float NewStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "SmoothlyChangeWindStrength");

	Params::InteractiveGrassManager_BP_C_SmoothlyChangeWindStrength Parms{};

	Parms.NewStrength = NewStrength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.SmoothlyChangeWindDirection
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewDirection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AInteractiveGrassManager_BP_C::SmoothlyChangeWindDirection(const struct FVector& NewDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "SmoothlyChangeWindDirection");

	Params::InteractiveGrassManager_BP_C_SmoothlyChangeWindDirection Parms{};

	Parms.NewDirection = std::move(NewDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AInteractiveGrassManager_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.WindStrengthChanger__Change__EventFunc
// (BlueprintEvent)

void AInteractiveGrassManager_BP_C::WindStrengthChanger__Change__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "WindStrengthChanger__Change__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.WindStrengthChanger__UpdateFunc
// (BlueprintEvent)

void AInteractiveGrassManager_BP_C::WindStrengthChanger__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "WindStrengthChanger__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.WindStrengthChanger__FinishedFunc
// (BlueprintEvent)

void AInteractiveGrassManager_BP_C::WindStrengthChanger__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "WindStrengthChanger__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.WindDirectionChanger__ChangeDirection__EventFunc
// (BlueprintEvent)

void AInteractiveGrassManager_BP_C::WindDirectionChanger__ChangeDirection__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "WindDirectionChanger__ChangeDirection__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.WindDirectionChanger__UpdateFunc
// (BlueprintEvent)

void AInteractiveGrassManager_BP_C::WindDirectionChanger__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "WindDirectionChanger__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.WindDirectionChanger__FinishedFunc
// (BlueprintEvent)

void AInteractiveGrassManager_BP_C::WindDirectionChanger__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "WindDirectionChanger__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.SpawnFoliage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SpawnUnderCursor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          LocationIfNotUnderCursor                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalIfNotUnderCursor                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MinScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MaxScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFoliageToSpawn_Struct           FoliageToSpawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FromCluster                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ClusterLastIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AInteractiveGrassManager_BP_C::SpawnFoliage(bool SpawnUnderCursor, const struct FVector& LocationIfNotUnderCursor, const struct FVector& NormalIfNotUnderCursor, const struct FVector& MinScale, const struct FVector& MaxScale, const struct FFoliageToSpawn_Struct& FoliageToSpawn, bool FromCluster, bool ClusterLastIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "SpawnFoliage");

	Params::InteractiveGrassManager_BP_C_SpawnFoliage Parms{};

	Parms.SpawnUnderCursor = SpawnUnderCursor;
	Parms.LocationIfNotUnderCursor = std::move(LocationIfNotUnderCursor);
	Parms.NormalIfNotUnderCursor = std::move(NormalIfNotUnderCursor);
	Parms.MinScale = std::move(MinScale);
	Parms.MaxScale = std::move(MaxScale);
	Parms.FoliageToSpawn = std::move(FoliageToSpawn);
	Parms.FromCluster = FromCluster;
	Parms.ClusterLastIndex = ClusterLastIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.SpawnFoliageCluster
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          CenterLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SizeX_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SizeY_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Density_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NonUniformDistribution                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFoliageToSpawn_Struct           FoliageToSpawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MinScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MaxScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseGrassSpawnAreas                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AGrassSpawnArea_BP_C*             GrassSpawnArea                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AInteractiveGrassManager_BP_C::SpawnFoliageCluster(const struct FVector& CenterLocation, float SizeX_, float SizeY_, float Density_, float NonUniformDistribution, const struct FFoliageToSpawn_Struct& FoliageToSpawn, const struct FVector& MinScale, const struct FVector& MaxScale, bool UseGrassSpawnAreas, class AGrassSpawnArea_BP_C* GrassSpawnArea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "SpawnFoliageCluster");

	Params::InteractiveGrassManager_BP_C_SpawnFoliageCluster Parms{};

	Parms.CenterLocation = std::move(CenterLocation);
	Parms.SizeX_ = SizeX_;
	Parms.SizeY_ = SizeY_;
	Parms.Density_ = Density_;
	Parms.NonUniformDistribution = NonUniformDistribution;
	Parms.FoliageToSpawn = std::move(FoliageToSpawn);
	Parms.MinScale = std::move(MinScale);
	Parms.MaxScale = std::move(MaxScale);
	Parms.UseGrassSpawnAreas = UseGrassSpawnAreas;
	Parms.GrassSpawnArea = GrassSpawnArea;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.GetFreeMaterialInteractionChannel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   FoundChannel                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AInteractiveGrassManager_BP_C::GetFreeMaterialInteractionChannel(bool* Found, int32* FoundChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "GetFreeMaterialInteractionChannel");

	Params::InteractiveGrassManager_BP_C_GetFreeMaterialInteractionChannel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (FoundChannel != nullptr)
		*FoundChannel = Parms.FoundChannel;
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.FreeUpMaterialInteractionChannel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NrOfChannel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AInteractiveGrassManager_BP_C::FreeUpMaterialInteractionChannel(int32 NrOfChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "FreeUpMaterialInteractionChannel");

	Params::InteractiveGrassManager_BP_C_FreeUpMaterialInteractionChannel Parms{};

	Parms.NrOfChannel = NrOfChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.DistanceToViewTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          FromLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AInteractiveGrassManager_BP_C::DistanceToViewTarget(const struct FVector& FromLocation, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "DistanceToViewTarget");

	Params::InteractiveGrassManager_BP_C_DistanceToViewTarget Parms{};

	Parms.FromLocation = std::move(FromLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.AddFoliageChunkActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ChunkCenter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UINTERACTIVE_FoliageComp_BP_C*    SourceComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReplaceWithSourceComponent                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    LeaveDefaultComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AInteractiveFoliageChunk_BP_C*    AddedChunk                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AInteractiveGrassManager_BP_C::AddFoliageChunkActor(const struct FVector& ChunkCenter, class UINTERACTIVE_FoliageComp_BP_C* SourceComponent, bool ReplaceWithSourceComponent, bool LeaveDefaultComponent, class AInteractiveFoliageChunk_BP_C** AddedChunk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "AddFoliageChunkActor");

	Params::InteractiveGrassManager_BP_C_AddFoliageChunkActor Parms{};

	Parms.ChunkCenter = std::move(ChunkCenter);
	Parms.SourceComponent = SourceComponent;
	Parms.ReplaceWithSourceComponent = ReplaceWithSourceComponent;
	Parms.LeaveDefaultComponent = LeaveDefaultComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (AddedChunk != nullptr)
		*AddedChunk = Parms.AddedChunk;
}


// Function InteractiveGrassManager_BP.InteractiveGrassManager_BP_C.PopulateMapWithGrass
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AInteractiveGrassManager_BP_C::PopulateMapWithGrass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractiveGrassManager_BP_C", "PopulateMapWithGrass");

	UObject::ProcessEvent(Func, nullptr);
}

}

