#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Base_GM

#include "Basic.hpp"


namespace SDK::Params
{

// Function Base_GM.Base_GM_C.ExecuteUbergraph_Base_GM
// 0x0028 (0x0028 - 0x0000)
struct Base_GM_C_ExecuteUbergraph_Base_GM final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_ExitingController;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_Event_NewPlayer;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_Event_OldPC;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_Event_NewPC;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Base_GM_C_ExecuteUbergraph_Base_GM) == 0x000008, "Wrong alignment on Base_GM_C_ExecuteUbergraph_Base_GM");
static_assert(sizeof(Base_GM_C_ExecuteUbergraph_Base_GM) == 0x000028, "Wrong size on Base_GM_C_ExecuteUbergraph_Base_GM");
static_assert(offsetof(Base_GM_C_ExecuteUbergraph_Base_GM, EntryPoint) == 0x000000, "Member 'Base_GM_C_ExecuteUbergraph_Base_GM::EntryPoint' has a wrong offset!");
static_assert(offsetof(Base_GM_C_ExecuteUbergraph_Base_GM, K2Node_Event_ExitingController) == 0x000008, "Member 'Base_GM_C_ExecuteUbergraph_Base_GM::K2Node_Event_ExitingController' has a wrong offset!");
static_assert(offsetof(Base_GM_C_ExecuteUbergraph_Base_GM, K2Node_Event_NewPlayer) == 0x000010, "Member 'Base_GM_C_ExecuteUbergraph_Base_GM::K2Node_Event_NewPlayer' has a wrong offset!");
static_assert(offsetof(Base_GM_C_ExecuteUbergraph_Base_GM, K2Node_Event_OldPC) == 0x000018, "Member 'Base_GM_C_ExecuteUbergraph_Base_GM::K2Node_Event_OldPC' has a wrong offset!");
static_assert(offsetof(Base_GM_C_ExecuteUbergraph_Base_GM, K2Node_Event_NewPC) == 0x000020, "Member 'Base_GM_C_ExecuteUbergraph_Base_GM::K2Node_Event_NewPC' has a wrong offset!");

// Function Base_GM.Base_GM_C.K2_OnLogout
// 0x0008 (0x0008 - 0x0000)
struct Base_GM_C_K2_OnLogout final
{
public:
	class AController*                            ExitingController;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Base_GM_C_K2_OnLogout) == 0x000008, "Wrong alignment on Base_GM_C_K2_OnLogout");
static_assert(sizeof(Base_GM_C_K2_OnLogout) == 0x000008, "Wrong size on Base_GM_C_K2_OnLogout");
static_assert(offsetof(Base_GM_C_K2_OnLogout, ExitingController) == 0x000000, "Member 'Base_GM_C_K2_OnLogout::ExitingController' has a wrong offset!");

// Function Base_GM.Base_GM_C.K2_OnSwapPlayerControllers
// 0x0010 (0x0010 - 0x0000)
struct Base_GM_C_K2_OnSwapPlayerControllers final
{
public:
	class APlayerController*                      OldPC;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      NewPC;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Base_GM_C_K2_OnSwapPlayerControllers) == 0x000008, "Wrong alignment on Base_GM_C_K2_OnSwapPlayerControllers");
static_assert(sizeof(Base_GM_C_K2_OnSwapPlayerControllers) == 0x000010, "Wrong size on Base_GM_C_K2_OnSwapPlayerControllers");
static_assert(offsetof(Base_GM_C_K2_OnSwapPlayerControllers, OldPC) == 0x000000, "Member 'Base_GM_C_K2_OnSwapPlayerControllers::OldPC' has a wrong offset!");
static_assert(offsetof(Base_GM_C_K2_OnSwapPlayerControllers, NewPC) == 0x000008, "Member 'Base_GM_C_K2_OnSwapPlayerControllers::NewPC' has a wrong offset!");

// Function Base_GM.Base_GM_C.K2_PostLogin
// 0x0008 (0x0008 - 0x0000)
struct Base_GM_C_K2_PostLogin final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Base_GM_C_K2_PostLogin) == 0x000008, "Wrong alignment on Base_GM_C_K2_PostLogin");
static_assert(sizeof(Base_GM_C_K2_PostLogin) == 0x000008, "Wrong size on Base_GM_C_K2_PostLogin");
static_assert(offsetof(Base_GM_C_K2_PostLogin, NewPlayer) == 0x000000, "Member 'Base_GM_C_K2_PostLogin::NewPlayer' has a wrong offset!");

// Function Base_GM.Base_GM_C.ServerTravel_ToGameplayMap
// 0x0028 (0x0028 - 0x0000)
struct Base_GM_C_ServerTravel_ToGameplayMap final
{
public:
	class FName                                   Map;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Base_GM_C_ServerTravel_ToGameplayMap) == 0x000008, "Wrong alignment on Base_GM_C_ServerTravel_ToGameplayMap");
static_assert(sizeof(Base_GM_C_ServerTravel_ToGameplayMap) == 0x000028, "Wrong size on Base_GM_C_ServerTravel_ToGameplayMap");
static_assert(offsetof(Base_GM_C_ServerTravel_ToGameplayMap, Map) == 0x000000, "Member 'Base_GM_C_ServerTravel_ToGameplayMap::Map' has a wrong offset!");
static_assert(offsetof(Base_GM_C_ServerTravel_ToGameplayMap, CallFunc_Conv_NameToString_ReturnValue) == 0x000008, "Member 'Base_GM_C_ServerTravel_ToGameplayMap::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Base_GM_C_ServerTravel_ToGameplayMap, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'Base_GM_C_ServerTravel_ToGameplayMap::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function Base_GM.Base_GM_C.Handle_PlayerConnection
// 0x0018 (0x0018 - 0x0000)
struct Base_GM_C_Handle_PlayerConnection final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALobby_PlayerController_C*              K2Node_DynamicCast_AsLobby_Player_Controller;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Base_GM_C_Handle_PlayerConnection) == 0x000008, "Wrong alignment on Base_GM_C_Handle_PlayerConnection");
static_assert(sizeof(Base_GM_C_Handle_PlayerConnection) == 0x000018, "Wrong size on Base_GM_C_Handle_PlayerConnection");
static_assert(offsetof(Base_GM_C_Handle_PlayerConnection, NewPlayer) == 0x000000, "Member 'Base_GM_C_Handle_PlayerConnection::NewPlayer' has a wrong offset!");
static_assert(offsetof(Base_GM_C_Handle_PlayerConnection, K2Node_DynamicCast_AsLobby_Player_Controller) == 0x000008, "Member 'Base_GM_C_Handle_PlayerConnection::K2Node_DynamicCast_AsLobby_Player_Controller' has a wrong offset!");
static_assert(offsetof(Base_GM_C_Handle_PlayerConnection, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'Base_GM_C_Handle_PlayerConnection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Base_GM_C_Handle_PlayerConnection, CallFunc_Array_Add_ReturnValue) == 0x000014, "Member 'Base_GM_C_Handle_PlayerConnection::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function Base_GM.Base_GM_C.Handle_PlayerDisconnection
// 0x0018 (0x0018 - 0x0000)
struct Base_GM_C_Handle_PlayerDisconnection final
{
public:
	class UObject*                                Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALobby_PlayerController_C*              K2Node_DynamicCast_AsLobby_Player_Controller;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Base_GM_C_Handle_PlayerDisconnection) == 0x000008, "Wrong alignment on Base_GM_C_Handle_PlayerDisconnection");
static_assert(sizeof(Base_GM_C_Handle_PlayerDisconnection) == 0x000018, "Wrong size on Base_GM_C_Handle_PlayerDisconnection");
static_assert(offsetof(Base_GM_C_Handle_PlayerDisconnection, Player) == 0x000000, "Member 'Base_GM_C_Handle_PlayerDisconnection::Player' has a wrong offset!");
static_assert(offsetof(Base_GM_C_Handle_PlayerDisconnection, K2Node_DynamicCast_AsLobby_Player_Controller) == 0x000008, "Member 'Base_GM_C_Handle_PlayerDisconnection::K2Node_DynamicCast_AsLobby_Player_Controller' has a wrong offset!");
static_assert(offsetof(Base_GM_C_Handle_PlayerDisconnection, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'Base_GM_C_Handle_PlayerDisconnection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Base_GM_C_Handle_PlayerDisconnection, CallFunc_Array_RemoveItem_ReturnValue) == 0x000011, "Member 'Base_GM_C_Handle_PlayerDisconnection::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function Base_GM.Base_GM_C.KickPlayer
// 0x0018 (0x0018 - 0x0000)
struct Base_GM_C_KickPlayer final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALobby_PlayerController_C*              CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_KickPlayer_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Base_GM_C_KickPlayer) == 0x000008, "Wrong alignment on Base_GM_C_KickPlayer");
static_assert(sizeof(Base_GM_C_KickPlayer) == 0x000018, "Wrong size on Base_GM_C_KickPlayer");
static_assert(offsetof(Base_GM_C_KickPlayer, PlayerId) == 0x000000, "Member 'Base_GM_C_KickPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(Base_GM_C_KickPlayer, CallFunc_Array_Get_Item) == 0x000008, "Member 'Base_GM_C_KickPlayer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Base_GM_C_KickPlayer, CallFunc_KickPlayer_ReturnValue) == 0x000010, "Member 'Base_GM_C_KickPlayer::CallFunc_KickPlayer_ReturnValue' has a wrong offset!");

}

