#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Diving_Helmet

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Diving_Helmet.BP_Diving_Helmet_C.ExecuteUbergraph_BP_Diving_Helmet
// 0x01D0 (0x01D0 - 0x0000)
struct BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_3;                   // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_2;                   // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName_1;                   // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x003C(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_3;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable;                                // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFancyCharacter*                        K2Node_DynamicCast_AsFancy_Character;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_4;                   // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPCharacter_Demo_C*                    K2Node_DynamicCast_AsBPCharacter_Demo;             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue_1;       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPCharacter_Demo_C*                    K2Node_DynamicCast_AsBPCharacter_Demo_1;           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMP_PS_C*                               K2Node_DynamicCast_AsMP_PS;                        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x00D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_TLerp_ReturnValue;                        // 0x0100(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x0130(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_4;            // 0x01B8(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet) == 0x000010, "Wrong alignment on BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet");
static_assert(sizeof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet) == 0x0001D0, "Wrong size on BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, EntryPoint) == 0x000000, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_CustomEvent_NotifyName_3) == 0x000014, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_CustomEvent_NotifyName_3' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_CustomEvent_NotifyName_2) == 0x00001C, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_CustomEvent_NotifyName_2' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_CustomEvent_NotifyName_1) == 0x000034, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_CustomEvent_NotifyName_1' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_CreateDelegate_OutputDelegate_2) == 0x00003C, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_CustomEvent_NotifyName) == 0x00004C, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_CreateDelegate_OutputDelegate_3) == 0x000054, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, Temp_name_Variable) == 0x000064, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, Temp_bool_Has_Been_Initd_Variable) == 0x00006C, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, CallFunc_GetAttachParentActor_ReturnValue) == 0x000070, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_DynamicCast_AsFancy_Character) == 0x000078, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_DynamicCast_AsFancy_Character' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_CustomEvent_NotifyName_4) == 0x000084, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_CustomEvent_NotifyName_4' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x000090, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_DynamicCast_AsBPCharacter_Demo) == 0x000098, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_DynamicCast_AsBPCharacter_Demo' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_DynamicCast_bSuccess_1) == 0x0000A0, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, CallFunc_IsValid_ReturnValue) == 0x0000A1, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, CallFunc_IsLocallyControlled_ReturnValue) == 0x0000A2, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, CallFunc_GetAttachParentActor_ReturnValue_1) == 0x0000A8, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::CallFunc_GetAttachParentActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_DynamicCast_AsBPCharacter_Demo_1) == 0x0000B0, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_DynamicCast_AsBPCharacter_Demo_1' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_DynamicCast_bSuccess_2) == 0x0000B8, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_DynamicCast_AsMP_PS) == 0x0000C0, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_DynamicCast_AsMP_PS' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_DynamicCast_bSuccess_3) == 0x0000C8, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, Temp_bool_IsClosed_Variable) == 0x0000C9, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, CallFunc_GetRelativeTransform_ReturnValue) == 0x0000D0, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, CallFunc_TLerp_ReturnValue) == 0x000100, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::CallFunc_TLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x000130, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet, K2Node_CreateDelegate_OutputDelegate_4) == 0x0001B8, "Member 'BP_Diving_Helmet_C_ExecuteUbergraph_BP_Diving_Helmet::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");

// Function BP_Diving_Helmet.BP_Diving_Helmet_C.OnCompleted_3FE3233945D5FF790518F1ADBD2F23FC
// 0x0008 (0x0008 - 0x0000)
struct BP_Diving_Helmet_C_OnCompleted_3FE3233945D5FF790518F1ADBD2F23FC final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Diving_Helmet_C_OnCompleted_3FE3233945D5FF790518F1ADBD2F23FC) == 0x000004, "Wrong alignment on BP_Diving_Helmet_C_OnCompleted_3FE3233945D5FF790518F1ADBD2F23FC");
static_assert(sizeof(BP_Diving_Helmet_C_OnCompleted_3FE3233945D5FF790518F1ADBD2F23FC) == 0x000008, "Wrong size on BP_Diving_Helmet_C_OnCompleted_3FE3233945D5FF790518F1ADBD2F23FC");
static_assert(offsetof(BP_Diving_Helmet_C_OnCompleted_3FE3233945D5FF790518F1ADBD2F23FC, NotifyName) == 0x000000, "Member 'BP_Diving_Helmet_C_OnCompleted_3FE3233945D5FF790518F1ADBD2F23FC::NotifyName' has a wrong offset!");

// Function BP_Diving_Helmet.BP_Diving_Helmet_C.OnBlendOut_3FE3233945D5FF790518F1ADBD2F23FC
// 0x0008 (0x0008 - 0x0000)
struct BP_Diving_Helmet_C_OnBlendOut_3FE3233945D5FF790518F1ADBD2F23FC final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Diving_Helmet_C_OnBlendOut_3FE3233945D5FF790518F1ADBD2F23FC) == 0x000004, "Wrong alignment on BP_Diving_Helmet_C_OnBlendOut_3FE3233945D5FF790518F1ADBD2F23FC");
static_assert(sizeof(BP_Diving_Helmet_C_OnBlendOut_3FE3233945D5FF790518F1ADBD2F23FC) == 0x000008, "Wrong size on BP_Diving_Helmet_C_OnBlendOut_3FE3233945D5FF790518F1ADBD2F23FC");
static_assert(offsetof(BP_Diving_Helmet_C_OnBlendOut_3FE3233945D5FF790518F1ADBD2F23FC, NotifyName) == 0x000000, "Member 'BP_Diving_Helmet_C_OnBlendOut_3FE3233945D5FF790518F1ADBD2F23FC::NotifyName' has a wrong offset!");

// Function BP_Diving_Helmet.BP_Diving_Helmet_C.OnInterrupted_3FE3233945D5FF790518F1ADBD2F23FC
// 0x0008 (0x0008 - 0x0000)
struct BP_Diving_Helmet_C_OnInterrupted_3FE3233945D5FF790518F1ADBD2F23FC final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Diving_Helmet_C_OnInterrupted_3FE3233945D5FF790518F1ADBD2F23FC) == 0x000004, "Wrong alignment on BP_Diving_Helmet_C_OnInterrupted_3FE3233945D5FF790518F1ADBD2F23FC");
static_assert(sizeof(BP_Diving_Helmet_C_OnInterrupted_3FE3233945D5FF790518F1ADBD2F23FC) == 0x000008, "Wrong size on BP_Diving_Helmet_C_OnInterrupted_3FE3233945D5FF790518F1ADBD2F23FC");
static_assert(offsetof(BP_Diving_Helmet_C_OnInterrupted_3FE3233945D5FF790518F1ADBD2F23FC, NotifyName) == 0x000000, "Member 'BP_Diving_Helmet_C_OnInterrupted_3FE3233945D5FF790518F1ADBD2F23FC::NotifyName' has a wrong offset!");

// Function BP_Diving_Helmet.BP_Diving_Helmet_C.OnNotifyBegin_3FE3233945D5FF790518F1ADBD2F23FC
// 0x0008 (0x0008 - 0x0000)
struct BP_Diving_Helmet_C_OnNotifyBegin_3FE3233945D5FF790518F1ADBD2F23FC final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Diving_Helmet_C_OnNotifyBegin_3FE3233945D5FF790518F1ADBD2F23FC) == 0x000004, "Wrong alignment on BP_Diving_Helmet_C_OnNotifyBegin_3FE3233945D5FF790518F1ADBD2F23FC");
static_assert(sizeof(BP_Diving_Helmet_C_OnNotifyBegin_3FE3233945D5FF790518F1ADBD2F23FC) == 0x000008, "Wrong size on BP_Diving_Helmet_C_OnNotifyBegin_3FE3233945D5FF790518F1ADBD2F23FC");
static_assert(offsetof(BP_Diving_Helmet_C_OnNotifyBegin_3FE3233945D5FF790518F1ADBD2F23FC, NotifyName) == 0x000000, "Member 'BP_Diving_Helmet_C_OnNotifyBegin_3FE3233945D5FF790518F1ADBD2F23FC::NotifyName' has a wrong offset!");

// Function BP_Diving_Helmet.BP_Diving_Helmet_C.OnNotifyEnd_3FE3233945D5FF790518F1ADBD2F23FC
// 0x0008 (0x0008 - 0x0000)
struct BP_Diving_Helmet_C_OnNotifyEnd_3FE3233945D5FF790518F1ADBD2F23FC final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Diving_Helmet_C_OnNotifyEnd_3FE3233945D5FF790518F1ADBD2F23FC) == 0x000004, "Wrong alignment on BP_Diving_Helmet_C_OnNotifyEnd_3FE3233945D5FF790518F1ADBD2F23FC");
static_assert(sizeof(BP_Diving_Helmet_C_OnNotifyEnd_3FE3233945D5FF790518F1ADBD2F23FC) == 0x000008, "Wrong size on BP_Diving_Helmet_C_OnNotifyEnd_3FE3233945D5FF790518F1ADBD2F23FC");
static_assert(offsetof(BP_Diving_Helmet_C_OnNotifyEnd_3FE3233945D5FF790518F1ADBD2F23FC, NotifyName) == 0x000000, "Member 'BP_Diving_Helmet_C_OnNotifyEnd_3FE3233945D5FF790518F1ADBD2F23FC::NotifyName' has a wrong offset!");

}

