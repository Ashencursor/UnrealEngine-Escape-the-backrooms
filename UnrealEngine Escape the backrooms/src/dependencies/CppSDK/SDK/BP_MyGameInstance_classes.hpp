#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MyGameInstance

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_Difficulty_structs.hpp"
#include "E_HeadsetType_structs.hpp"
#include "Backrooms_structs.hpp"
#include "Backrooms_classes.hpp"
#include "E_GameMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MyGameInstance.BP_MyGameInstance_C
// 0x0168 (0x03B0 - 0x0248)
class UBP_MyGameInstance_C final : public UFancyGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_LoadingScreen_C*                     W_LoadingScreenRef;                                // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   LoadingMessage;                                    // 0x0258(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   LoadingMessageTip;                                 // 0x0270(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AlreadyIntro_;                                     // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLoadingBeforeContinue;                         // 0x028C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AMP_PlayerController_C*>         ToRespawn;                                         // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	E_Difficulty                                  Difficulty;                                        // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasKicked;                                         // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A2[0x6];                                      // 0x02A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Code;                                              // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CurrentSlotName;                                   // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FromHub;                                           // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsExit;                                            // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasSeenSanityWarning;                              // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CB[0x5];                                      // 0x02CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, E_HeadsetType>            HeadsetMap;                                        // 0x02D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 ExtraData;                                         // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsLoading;                                         // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastXP;                                            // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GameMode                                    CurrentMode;                                       // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StartingLevel;                                     // 0x033C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DidCompleteMission;                                // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMissionStructure                      MissionCompleteData;                               // 0x0348(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasSeenGlowstickHint;                              // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_MyGameInstance(int32 EntryPoint);
	void HandleNetworkError(ENetworkFailure FailureType, bool bIsServer);
	void ReceiveShutdown();
	void OnSteamOverlayIsActive(bool IsOverlayActive);
	void ResetAfterErrorFocus(class APlayerController* PlayerController, class UWidget* Widget);
	void UnlockAchievement(class FName AchievementName);
	void OnPlayerTalkingStateChanged(const struct FBPUniqueNetId& PlayerId, bool bIsTalking);
	void OnSessionInviteAccepted(int32 LocalPlayerNum, const struct FBPUniqueNetId& PersonInvited, const struct FBlueprintSessionResult& SessionToJoin);
	void ReceiveInit();
	void Initialize_AudioSettings();
	void JoinServerSession(const struct FBlueprintSessionResult& Session, class APlayerController* PlayerController, class UWidget* ParentRef, bool ShowLoadingScreen_0);
	void CreateServer(class APlayerController* PlayerController, class UWidget* WidgetRef, class UWidget* ParentRef, class FName LevelName, int32 MaxPlayer, bool IsPrivate, const class FText& ServerName);
	void ShowLoadingScreen(class APlayerController* PlayerController, const class FText& Message);
	void OnSuccess_CE0E125D465CF87986EDACB437749973();
	void OnFailure_CE0E125D465CF87986EDACB437749973();
	void OnSuccess_4A8E1BF4489B644EBB46CCB5CE87A8FB();
	void OnFailure_4A8E1BF4489B644EBB46CCB5CE87A8FB();
	void OnSuccess_F6A1C64C4BF407E4C67D4F8266759C0F(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_F6A1C64C4BF407E4C67D4F8266759C0F(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnSuccess_CAE6F30D4DC345FC9711EAB8167D6CDE();
	void OnFailure_CAE6F30D4DC345FC9711EAB8167D6CDE();
	void OnSuccess_3A8DCEEA406564302B3F52A5D035B982();
	void OnFailure_3A8DCEEA406564302B3F52A5D035B982();
	void OnSuccess_D7E8A28A46B4BD5B7318A6A66AFD14E2();
	void OnFailure_D7E8A28A46B4BD5B7318A6A66AFD14E2();
	void OnSuccess_B065C47F48B157C121B06CAFCED8C6AC();
	void OnFailure_B065C47F48B157C121B06CAFCED8C6AC();
	void GenerateCode();
	void CheckCodeUnique(const struct FSessionsSearchSetting& Code_0);
	void ResetInput();
	void CheckShouldDisplayEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MyGameInstance_C">();
	}
	static class UBP_MyGameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MyGameInstance_C>();
	}
};
static_assert(alignof(UBP_MyGameInstance_C) == 0x000008, "Wrong alignment on UBP_MyGameInstance_C");
static_assert(sizeof(UBP_MyGameInstance_C) == 0x0003B0, "Wrong size on UBP_MyGameInstance_C");
static_assert(offsetof(UBP_MyGameInstance_C, UberGraphFrame) == 0x000248, "Member 'UBP_MyGameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, W_LoadingScreenRef) == 0x000250, "Member 'UBP_MyGameInstance_C::W_LoadingScreenRef' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, LoadingMessage) == 0x000258, "Member 'UBP_MyGameInstance_C::LoadingMessage' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, LoadingMessageTip) == 0x000270, "Member 'UBP_MyGameInstance_C::LoadingMessageTip' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, AlreadyIntro_) == 0x000288, "Member 'UBP_MyGameInstance_C::AlreadyIntro_' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, TimeLoadingBeforeContinue) == 0x00028C, "Member 'UBP_MyGameInstance_C::TimeLoadingBeforeContinue' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, ToRespawn) == 0x000290, "Member 'UBP_MyGameInstance_C::ToRespawn' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, Difficulty) == 0x0002A0, "Member 'UBP_MyGameInstance_C::Difficulty' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, WasKicked) == 0x0002A1, "Member 'UBP_MyGameInstance_C::WasKicked' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, Code) == 0x0002A8, "Member 'UBP_MyGameInstance_C::Code' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, CurrentSlotName) == 0x0002B8, "Member 'UBP_MyGameInstance_C::CurrentSlotName' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, FromHub) == 0x0002C8, "Member 'UBP_MyGameInstance_C::FromHub' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, IsExit) == 0x0002C9, "Member 'UBP_MyGameInstance_C::IsExit' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, HasSeenSanityWarning) == 0x0002CA, "Member 'UBP_MyGameInstance_C::HasSeenSanityWarning' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, HeadsetMap) == 0x0002D0, "Member 'UBP_MyGameInstance_C::HeadsetMap' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, ExtraData) == 0x000320, "Member 'UBP_MyGameInstance_C::ExtraData' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, IsLoading) == 0x000330, "Member 'UBP_MyGameInstance_C::IsLoading' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, LastXP) == 0x000334, "Member 'UBP_MyGameInstance_C::LastXP' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, CurrentMode) == 0x000338, "Member 'UBP_MyGameInstance_C::CurrentMode' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, StartingLevel) == 0x00033C, "Member 'UBP_MyGameInstance_C::StartingLevel' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, DidCompleteMission) == 0x000344, "Member 'UBP_MyGameInstance_C::DidCompleteMission' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, MissionCompleteData) == 0x000348, "Member 'UBP_MyGameInstance_C::MissionCompleteData' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, HasSeenGlowstickHint) == 0x0003A8, "Member 'UBP_MyGameInstance_C::HasSeenGlowstickHint' has a wrong offset!");

}

